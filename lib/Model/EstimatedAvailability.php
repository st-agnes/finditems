<?php
/**
 * EstimatedAvailability
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API to View & Search for Items
 *
 * The Browse API lets shoppers search for specific items by keyword, category, product, or item aspects and retrieve the details of an item.
 *
 * OpenAPI spec version: v1_beta.10.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EstimatedAvailability Class Doc Comment
 *
 * @category Class
 * @description The type that defines the fields for the estimated item availability information.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EstimatedAvailability implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EstimatedAvailability';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'availability_threshold' => 'int',
        'availability_threshold_type' => 'string',
        'delivery_options' => 'string[]',
        'estimated_availability_status' => 'string',
        'estimated_available_quantity' => 'int',
        'estimated_sold_quantity' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'availability_threshold' => null,
        'availability_threshold_type' => null,
        'delivery_options' => null,
        'estimated_availability_status' => null,
        'estimated_available_quantity' => null,
        'estimated_sold_quantity' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'availability_threshold' => 'availabilityThreshold',
        'availability_threshold_type' => 'availabilityThresholdType',
        'delivery_options' => 'deliveryOptions',
        'estimated_availability_status' => 'estimatedAvailabilityStatus',
        'estimated_available_quantity' => 'estimatedAvailableQuantity',
        'estimated_sold_quantity' => 'estimatedSoldQuantity'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'availability_threshold' => 'setAvailabilityThreshold',
        'availability_threshold_type' => 'setAvailabilityThresholdType',
        'delivery_options' => 'setDeliveryOptions',
        'estimated_availability_status' => 'setEstimatedAvailabilityStatus',
        'estimated_available_quantity' => 'setEstimatedAvailableQuantity',
        'estimated_sold_quantity' => 'setEstimatedSoldQuantity'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'availability_threshold' => 'getAvailabilityThreshold',
        'availability_threshold_type' => 'getAvailabilityThresholdType',
        'delivery_options' => 'getDeliveryOptions',
        'estimated_availability_status' => 'getEstimatedAvailabilityStatus',
        'estimated_available_quantity' => 'getEstimatedAvailableQuantity',
        'estimated_sold_quantity' => 'getEstimatedSoldQuantity'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['availability_threshold'] = isset($data['availability_threshold']) ? $data['availability_threshold'] : null;
        $this->container['availability_threshold_type'] = isset($data['availability_threshold_type']) ? $data['availability_threshold_type'] : null;
        $this->container['delivery_options'] = isset($data['delivery_options']) ? $data['delivery_options'] : null;
        $this->container['estimated_availability_status'] = isset($data['estimated_availability_status']) ? $data['estimated_availability_status'] : null;
        $this->container['estimated_available_quantity'] = isset($data['estimated_available_quantity']) ? $data['estimated_available_quantity'] : null;
        $this->container['estimated_sold_quantity'] = isset($data['estimated_sold_quantity']) ? $data['estimated_sold_quantity'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets availability_threshold
     *
     * @return int
     */
    public function getAvailabilityThreshold()
    {
        return $this->container['availability_threshold'];
    }

    /**
     * Sets availability_threshold
     *
     * @param int $availability_threshold The 'display item quantity' threshold value the seller has set.
     *
     * @return $this
     */
    public function setAvailabilityThreshold($availability_threshold)
    {
        $this->container['availability_threshold'] = $availability_threshold;

        return $this;
    }

    /**
     * Gets availability_threshold_type
     *
     * @return string
     */
    public function getAvailabilityThresholdType()
    {
        return $this->container['availability_threshold_type'];
    }

    /**
     * Sets availability_threshold_type
     *
     * @param string $availability_threshold_type Only returns MORE_THAN, which indicates that the seller has more that the 'quantity display preference' value in stock for this item. This field depends on how the seller has set their item quantity display preference. Let's say the following are the quantity display preferences the seller can choose between. Display &quot;More than 10 available&quot; in your listing (if applicable) If the seller enables this preference, this field is returned as long as there are more than 10 in inventory of this item. If the quantity is equal to 10 or drops below 10, this field is not returned and the actual quantity of the item is returned in the estimatedAvailableQuantity field. Display the exact quantity in your listings If the seller enables this preference, the availabilityThresholdType field is not returned and the actual quantity of the item is returned in the estimatedAvailableQuantity field. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/browse/types/AvailabilityThresholdEnum.html'>eBay API documentation</a>
     *
     * @return $this
     */
    public function setAvailabilityThresholdType($availability_threshold_type)
    {
        $this->container['availability_threshold_type'] = $availability_threshold_type;

        return $this;
    }

    /**
     * Gets delivery_options
     *
     * @return string[]
     */
    public function getDeliveryOptions()
    {
        return $this->container['delivery_options'];
    }

    /**
     * Sets delivery_options
     *
     * @param string[] $delivery_options An array of available delivery options.
     *
     * @return $this
     */
    public function setDeliveryOptions($delivery_options)
    {
        $this->container['delivery_options'] = $delivery_options;

        return $this;
    }

    /**
     * Gets estimated_availability_status
     *
     * @return string
     */
    public function getEstimatedAvailabilityStatus()
    {
        return $this->container['estimated_availability_status'];
    }

    /**
     * Sets estimated_availability_status
     *
     * @param string $estimated_availability_status Indicates the estimated availability of this item. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/browse/types/AvailabilityStatusEnum.html'>eBay API documentation</a>
     *
     * @return $this
     */
    public function setEstimatedAvailabilityStatus($estimated_availability_status)
    {
        $this->container['estimated_availability_status'] = $estimated_availability_status;

        return $this;
    }

    /**
     * Gets estimated_available_quantity
     *
     * @return int
     */
    public function getEstimatedAvailableQuantity()
    {
        return $this->container['estimated_available_quantity'];
    }

    /**
     * Sets estimated_available_quantity
     *
     * @param int $estimated_available_quantity The estimated number of a specific item that are available for purchase.
     *
     * @return $this
     */
    public function setEstimatedAvailableQuantity($estimated_available_quantity)
    {
        $this->container['estimated_available_quantity'] = $estimated_available_quantity;

        return $this;
    }

    /**
     * Gets estimated_sold_quantity
     *
     * @return int
     */
    public function getEstimatedSoldQuantity()
    {
        return $this->container['estimated_sold_quantity'];
    }

    /**
     * Sets estimated_sold_quantity
     *
     * @param int $estimated_sold_quantity The estimated number of a specific item that have been sold.
     *
     * @return $this
     */
    public function setEstimatedSoldQuantity($estimated_sold_quantity)
    {
        $this->container['estimated_sold_quantity'] = $estimated_sold_quantity;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


