<?php
/**
 * Taxes
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API to View & Search for Items
 *
 * The Browse API lets shoppers search for specific items by keyword, category, product, or item aspects and retrieve the details of an item.
 *
 * OpenAPI spec version: v1_beta.10.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Taxes Class Doc Comment
 *
 * @category Class
 * @description The type that defines the tax fields.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Taxes implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Taxes';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'included_in_price' => 'bool',
        'shipping_and_handling_taxed' => 'bool',
        'tax_jurisdiction' => '\Swagger\Client\Model\TaxJurisdiction',
        'tax_percentage' => 'string',
        'tax_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'included_in_price' => null,
        'shipping_and_handling_taxed' => null,
        'tax_jurisdiction' => null,
        'tax_percentage' => null,
        'tax_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'included_in_price' => 'includedInPrice',
        'shipping_and_handling_taxed' => 'shippingAndHandlingTaxed',
        'tax_jurisdiction' => 'taxJurisdiction',
        'tax_percentage' => 'taxPercentage',
        'tax_type' => 'taxType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'included_in_price' => 'setIncludedInPrice',
        'shipping_and_handling_taxed' => 'setShippingAndHandlingTaxed',
        'tax_jurisdiction' => 'setTaxJurisdiction',
        'tax_percentage' => 'setTaxPercentage',
        'tax_type' => 'setTaxType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'included_in_price' => 'getIncludedInPrice',
        'shipping_and_handling_taxed' => 'getShippingAndHandlingTaxed',
        'tax_jurisdiction' => 'getTaxJurisdiction',
        'tax_percentage' => 'getTaxPercentage',
        'tax_type' => 'getTaxType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['included_in_price'] = isset($data['included_in_price']) ? $data['included_in_price'] : null;
        $this->container['shipping_and_handling_taxed'] = isset($data['shipping_and_handling_taxed']) ? $data['shipping_and_handling_taxed'] : null;
        $this->container['tax_jurisdiction'] = isset($data['tax_jurisdiction']) ? $data['tax_jurisdiction'] : null;
        $this->container['tax_percentage'] = isset($data['tax_percentage']) ? $data['tax_percentage'] : null;
        $this->container['tax_type'] = isset($data['tax_type']) ? $data['tax_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets included_in_price
     *
     * @return bool
     */
    public function getIncludedInPrice()
    {
        return $this->container['included_in_price'];
    }

    /**
     * Sets included_in_price
     *
     * @param bool $included_in_price Indicates if tax was applied for the cost of the item.
     *
     * @return $this
     */
    public function setIncludedInPrice($included_in_price)
    {
        $this->container['included_in_price'] = $included_in_price;

        return $this;
    }

    /**
     * Gets shipping_and_handling_taxed
     *
     * @return bool
     */
    public function getShippingAndHandlingTaxed()
    {
        return $this->container['shipping_and_handling_taxed'];
    }

    /**
     * Sets shipping_and_handling_taxed
     *
     * @param bool $shipping_and_handling_taxed Indicates if tax is applied for the shipping cost.
     *
     * @return $this
     */
    public function setShippingAndHandlingTaxed($shipping_and_handling_taxed)
    {
        $this->container['shipping_and_handling_taxed'] = $shipping_and_handling_taxed;

        return $this;
    }

    /**
     * Gets tax_jurisdiction
     *
     * @return \Swagger\Client\Model\TaxJurisdiction
     */
    public function getTaxJurisdiction()
    {
        return $this->container['tax_jurisdiction'];
    }

    /**
     * Sets tax_jurisdiction
     *
     * @param \Swagger\Client\Model\TaxJurisdiction $tax_jurisdiction tax_jurisdiction
     *
     * @return $this
     */
    public function setTaxJurisdiction($tax_jurisdiction)
    {
        $this->container['tax_jurisdiction'] = $tax_jurisdiction;

        return $this;
    }

    /**
     * Gets tax_percentage
     *
     * @return string
     */
    public function getTaxPercentage()
    {
        return $this->container['tax_percentage'];
    }

    /**
     * Sets tax_percentage
     *
     * @param string $tax_percentage The percentage of tax.
     *
     * @return $this
     */
    public function setTaxPercentage($tax_percentage)
    {
        $this->container['tax_percentage'] = $tax_percentage;

        return $this;
    }

    /**
     * Gets tax_type
     *
     * @return string
     */
    public function getTaxType()
    {
        return $this->container['tax_type'];
    }

    /**
     * Sets tax_type
     *
     * @param string $tax_type Container that returns the tax type. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/browse/types/TaxType.html'>eBay API documentation</a>
     *
     * @return $this
     */
    public function setTaxType($tax_type)
    {
        $this->container['tax_type'] = $tax_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


