<?php
/**
 * SellerLegalInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API to View & Search for Items
 *
 * The Browse API lets shoppers search for specific items by keyword, category, product, or item aspects and retrieve the details of an item.
 *
 * OpenAPI spec version: v1_beta.10.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SellerLegalInfo Class Doc Comment
 *
 * @category Class
 * @description The type that defines the fields for the contact information for a seller.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SellerLegalInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SellerLegalInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'email' => 'string',
        'fax' => 'string',
        'imprint' => 'string',
        'legal_contact_first_name' => 'string',
        'legal_contact_last_name' => 'string',
        'name' => 'string',
        'phone' => 'string',
        'registration_number' => 'string',
        'seller_provided_legal_address' => '\Swagger\Client\Model\LegalAddress',
        'terms_of_service' => 'string',
        'vat_details' => '\Swagger\Client\Model\VatDetail[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'email' => null,
        'fax' => null,
        'imprint' => null,
        'legal_contact_first_name' => null,
        'legal_contact_last_name' => null,
        'name' => null,
        'phone' => null,
        'registration_number' => null,
        'seller_provided_legal_address' => null,
        'terms_of_service' => null,
        'vat_details' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'email' => 'email',
        'fax' => 'fax',
        'imprint' => 'imprint',
        'legal_contact_first_name' => 'legalContactFirstName',
        'legal_contact_last_name' => 'legalContactLastName',
        'name' => 'name',
        'phone' => 'phone',
        'registration_number' => 'registrationNumber',
        'seller_provided_legal_address' => 'sellerProvidedLegalAddress',
        'terms_of_service' => 'termsOfService',
        'vat_details' => 'vatDetails'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'email' => 'setEmail',
        'fax' => 'setFax',
        'imprint' => 'setImprint',
        'legal_contact_first_name' => 'setLegalContactFirstName',
        'legal_contact_last_name' => 'setLegalContactLastName',
        'name' => 'setName',
        'phone' => 'setPhone',
        'registration_number' => 'setRegistrationNumber',
        'seller_provided_legal_address' => 'setSellerProvidedLegalAddress',
        'terms_of_service' => 'setTermsOfService',
        'vat_details' => 'setVatDetails'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'email' => 'getEmail',
        'fax' => 'getFax',
        'imprint' => 'getImprint',
        'legal_contact_first_name' => 'getLegalContactFirstName',
        'legal_contact_last_name' => 'getLegalContactLastName',
        'name' => 'getName',
        'phone' => 'getPhone',
        'registration_number' => 'getRegistrationNumber',
        'seller_provided_legal_address' => 'getSellerProvidedLegalAddress',
        'terms_of_service' => 'getTermsOfService',
        'vat_details' => 'getVatDetails'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['fax'] = isset($data['fax']) ? $data['fax'] : null;
        $this->container['imprint'] = isset($data['imprint']) ? $data['imprint'] : null;
        $this->container['legal_contact_first_name'] = isset($data['legal_contact_first_name']) ? $data['legal_contact_first_name'] : null;
        $this->container['legal_contact_last_name'] = isset($data['legal_contact_last_name']) ? $data['legal_contact_last_name'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['registration_number'] = isset($data['registration_number']) ? $data['registration_number'] : null;
        $this->container['seller_provided_legal_address'] = isset($data['seller_provided_legal_address']) ? $data['seller_provided_legal_address'] : null;
        $this->container['terms_of_service'] = isset($data['terms_of_service']) ? $data['terms_of_service'] : null;
        $this->container['vat_details'] = isset($data['vat_details']) ? $data['vat_details'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email The seller's business email address.
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets fax
     *
     * @return string
     */
    public function getFax()
    {
        return $this->container['fax'];
    }

    /**
     * Sets fax
     *
     * @param string $fax The seller' business fax number.
     *
     * @return $this
     */
    public function setFax($fax)
    {
        $this->container['fax'] = $fax;

        return $this;
    }

    /**
     * Gets imprint
     *
     * @return string
     */
    public function getImprint()
    {
        return $this->container['imprint'];
    }

    /**
     * Sets imprint
     *
     * @param string $imprint This is a free-form string created by the seller. This is information often found on business cards, such as address. This is information used by some countries.
     *
     * @return $this
     */
    public function setImprint($imprint)
    {
        $this->container['imprint'] = $imprint;

        return $this;
    }

    /**
     * Gets legal_contact_first_name
     *
     * @return string
     */
    public function getLegalContactFirstName()
    {
        return $this->container['legal_contact_first_name'];
    }

    /**
     * Sets legal_contact_first_name
     *
     * @param string $legal_contact_first_name The seller's first name.
     *
     * @return $this
     */
    public function setLegalContactFirstName($legal_contact_first_name)
    {
        $this->container['legal_contact_first_name'] = $legal_contact_first_name;

        return $this;
    }

    /**
     * Gets legal_contact_last_name
     *
     * @return string
     */
    public function getLegalContactLastName()
    {
        return $this->container['legal_contact_last_name'];
    }

    /**
     * Sets legal_contact_last_name
     *
     * @param string $legal_contact_last_name The seller's last name.
     *
     * @return $this
     */
    public function setLegalContactLastName($legal_contact_last_name)
    {
        $this->container['legal_contact_last_name'] = $legal_contact_last_name;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the seller's business.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string $phone The seller's business phone number.
     *
     * @return $this
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets registration_number
     *
     * @return string
     */
    public function getRegistrationNumber()
    {
        return $this->container['registration_number'];
    }

    /**
     * Sets registration_number
     *
     * @param string $registration_number The seller's registration number. This is information used by some countries.
     *
     * @return $this
     */
    public function setRegistrationNumber($registration_number)
    {
        $this->container['registration_number'] = $registration_number;

        return $this;
    }

    /**
     * Gets seller_provided_legal_address
     *
     * @return \Swagger\Client\Model\LegalAddress
     */
    public function getSellerProvidedLegalAddress()
    {
        return $this->container['seller_provided_legal_address'];
    }

    /**
     * Sets seller_provided_legal_address
     *
     * @param \Swagger\Client\Model\LegalAddress $seller_provided_legal_address seller_provided_legal_address
     *
     * @return $this
     */
    public function setSellerProvidedLegalAddress($seller_provided_legal_address)
    {
        $this->container['seller_provided_legal_address'] = $seller_provided_legal_address;

        return $this;
    }

    /**
     * Gets terms_of_service
     *
     * @return string
     */
    public function getTermsOfService()
    {
        return $this->container['terms_of_service'];
    }

    /**
     * Sets terms_of_service
     *
     * @param string $terms_of_service This is a free-form string created by the seller. This is the seller's terms or condition, which is in addition to the seller's return policies.
     *
     * @return $this
     */
    public function setTermsOfService($terms_of_service)
    {
        $this->container['terms_of_service'] = $terms_of_service;

        return $this;
    }

    /**
     * Gets vat_details
     *
     * @return \Swagger\Client\Model\VatDetail[]
     */
    public function getVatDetails()
    {
        return $this->container['vat_details'];
    }

    /**
     * Sets vat_details
     *
     * @param \Swagger\Client\Model\VatDetail[] $vat_details An array of the seller's VAT (value added tax) Ids and the issuing country. VAT is a tax added by some European countries.
     *
     * @return $this
     */
    public function setVatDetails($vat_details)
    {
        $this->container['vat_details'] = $vat_details;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


