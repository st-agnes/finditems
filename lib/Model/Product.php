<?php
/**
 * Product
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API to View & Search for Items
 *
 * The Browse API lets shoppers search for specific items by keyword, category, product, or item aspects and retrieve the details of an item.
 *
 * OpenAPI spec version: v1_beta.10.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Product Class Doc Comment
 *
 * @category Class
 * @description The type that defines the fields for the product information of the item.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Product implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Product';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'additional_images' => '\Swagger\Client\Model\Image[]',
        'additional_product_identities' => '\Swagger\Client\Model\AdditionalProductIdentity[]',
        'aspect_groups' => '\Swagger\Client\Model\AspectGroup[]',
        'brand' => 'string',
        'description' => 'string',
        'gtins' => 'string[]',
        'image' => '\Swagger\Client\Model\Image',
        'mpns' => 'string[]',
        'title' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'additional_images' => null,
        'additional_product_identities' => null,
        'aspect_groups' => null,
        'brand' => null,
        'description' => null,
        'gtins' => null,
        'image' => null,
        'mpns' => null,
        'title' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'additional_images' => 'additionalImages',
        'additional_product_identities' => 'additionalProductIdentities',
        'aspect_groups' => 'aspectGroups',
        'brand' => 'brand',
        'description' => 'description',
        'gtins' => 'gtins',
        'image' => 'image',
        'mpns' => 'mpns',
        'title' => 'title'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'additional_images' => 'setAdditionalImages',
        'additional_product_identities' => 'setAdditionalProductIdentities',
        'aspect_groups' => 'setAspectGroups',
        'brand' => 'setBrand',
        'description' => 'setDescription',
        'gtins' => 'setGtins',
        'image' => 'setImage',
        'mpns' => 'setMpns',
        'title' => 'setTitle'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'additional_images' => 'getAdditionalImages',
        'additional_product_identities' => 'getAdditionalProductIdentities',
        'aspect_groups' => 'getAspectGroups',
        'brand' => 'getBrand',
        'description' => 'getDescription',
        'gtins' => 'getGtins',
        'image' => 'getImage',
        'mpns' => 'getMpns',
        'title' => 'getTitle'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['additional_images'] = isset($data['additional_images']) ? $data['additional_images'] : null;
        $this->container['additional_product_identities'] = isset($data['additional_product_identities']) ? $data['additional_product_identities'] : null;
        $this->container['aspect_groups'] = isset($data['aspect_groups']) ? $data['aspect_groups'] : null;
        $this->container['brand'] = isset($data['brand']) ? $data['brand'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['gtins'] = isset($data['gtins']) ? $data['gtins'] : null;
        $this->container['image'] = isset($data['image']) ? $data['image'] : null;
        $this->container['mpns'] = isset($data['mpns']) ? $data['mpns'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets additional_images
     *
     * @return \Swagger\Client\Model\Image[]
     */
    public function getAdditionalImages()
    {
        return $this->container['additional_images'];
    }

    /**
     * Sets additional_images
     *
     * @param \Swagger\Client\Model\Image[] $additional_images An array of containers with the URLs for the product images that are in addition to the primary image.
     *
     * @return $this
     */
    public function setAdditionalImages($additional_images)
    {
        $this->container['additional_images'] = $additional_images;

        return $this;
    }

    /**
     * Gets additional_product_identities
     *
     * @return \Swagger\Client\Model\AdditionalProductIdentity[]
     */
    public function getAdditionalProductIdentities()
    {
        return $this->container['additional_product_identities'];
    }

    /**
     * Sets additional_product_identities
     *
     * @param \Swagger\Client\Model\AdditionalProductIdentity[] $additional_product_identities A product can have more than one identifier value for a product type, such as UPC, EAN, etc. For example, the same product UPC can have an identifier that is 12, 13, or 14 digits. This container returns an array of all the product identifiers (type/value pairs) associated with the product. These are in addition to the identifiers returned in the mpn and gitn fields.
     *
     * @return $this
     */
    public function setAdditionalProductIdentities($additional_product_identities)
    {
        $this->container['additional_product_identities'] = $additional_product_identities;

        return $this;
    }

    /**
     * Gets aspect_groups
     *
     * @return \Swagger\Client\Model\AspectGroup[]
     */
    public function getAspectGroups()
    {
        return $this->container['aspect_groups'];
    }

    /**
     * Sets aspect_groups
     *
     * @param \Swagger\Client\Model\AspectGroup[] $aspect_groups An array of containers for the product aspects. Each group contains the aspect group name and the aspect name/value pairs.
     *
     * @return $this
     */
    public function setAspectGroups($aspect_groups)
    {
        $this->container['aspect_groups'] = $aspect_groups;

        return $this;
    }

    /**
     * Gets brand
     *
     * @return string
     */
    public function getBrand()
    {
        return $this->container['brand'];
    }

    /**
     * Sets brand
     *
     * @param string $brand The brand associated with product. To identify the product, this is always used along with MPN (manufacturer part number).
     *
     * @return $this
     */
    public function setBrand($brand)
    {
        $this->container['brand'] = $brand;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description The rich description of an eBay product, which might contain HTML.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets gtins
     *
     * @return string[]
     */
    public function getGtins()
    {
        return $this->container['gtins'];
    }

    /**
     * Sets gtins
     *
     * @param string[] $gtins An array of all the possible GTINs values associated with the product. A GTIN is a unique Global Trade Item number of the item as defined by http://www.gtin.info. This can be a UPC (Universal Product Code), EAN (European Article Number), or an ISBN (International Standard Book Number) value.
     *
     * @return $this
     */
    public function setGtins($gtins)
    {
        $this->container['gtins'] = $gtins;

        return $this;
    }

    /**
     * Gets image
     *
     * @return \Swagger\Client\Model\Image
     */
    public function getImage()
    {
        return $this->container['image'];
    }

    /**
     * Sets image
     *
     * @param \Swagger\Client\Model\Image $image image
     *
     * @return $this
     */
    public function setImage($image)
    {
        $this->container['image'] = $image;

        return $this;
    }

    /**
     * Gets mpns
     *
     * @return string[]
     */
    public function getMpns()
    {
        return $this->container['mpns'];
    }

    /**
     * Sets mpns
     *
     * @param string[] $mpns An array of all possible MPN values associated with the product. A MPNs is manufacturer part number of the product. To identify the product, this is always used along with brand.
     *
     * @return $this
     */
    public function setMpns($mpns)
    {
        $this->container['mpns'] = $mpns;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title The title of the product.
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


