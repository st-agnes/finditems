<?php
/**
 * ShippingOption
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API to View & Search for Items
 *
 * The Browse API lets shoppers search for specific items by keyword, category, product, or item aspects and retrieve the details of an item.
 *
 * OpenAPI spec version: v1_beta.10.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ShippingOption Class Doc Comment
 *
 * @category Class
 * @description The type that defines the fields for the details of a shipping provider.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ShippingOption implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ShippingOption';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'additional_shipping_cost_per_unit' => '\Swagger\Client\Model\ConvertedAmount',
        'cut_off_date_used_for_estimate' => 'string',
        'max_estimated_delivery_date' => 'string',
        'min_estimated_delivery_date' => 'string',
        'quantity_used_for_estimate' => 'int',
        'shipping_carrier_code' => 'string',
        'shipping_cost' => '\Swagger\Client\Model\ConvertedAmount',
        'shipping_cost_type' => 'string',
        'shipping_service_code' => 'string',
        'ship_to_location_used_for_estimate' => '\Swagger\Client\Model\ShipToLocation',
        'trademark_symbol' => 'string',
        'type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'additional_shipping_cost_per_unit' => null,
        'cut_off_date_used_for_estimate' => null,
        'max_estimated_delivery_date' => null,
        'min_estimated_delivery_date' => null,
        'quantity_used_for_estimate' => null,
        'shipping_carrier_code' => null,
        'shipping_cost' => null,
        'shipping_cost_type' => null,
        'shipping_service_code' => null,
        'ship_to_location_used_for_estimate' => null,
        'trademark_symbol' => null,
        'type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'additional_shipping_cost_per_unit' => 'additionalShippingCostPerUnit',
        'cut_off_date_used_for_estimate' => 'cutOffDateUsedForEstimate',
        'max_estimated_delivery_date' => 'maxEstimatedDeliveryDate',
        'min_estimated_delivery_date' => 'minEstimatedDeliveryDate',
        'quantity_used_for_estimate' => 'quantityUsedForEstimate',
        'shipping_carrier_code' => 'shippingCarrierCode',
        'shipping_cost' => 'shippingCost',
        'shipping_cost_type' => 'shippingCostType',
        'shipping_service_code' => 'shippingServiceCode',
        'ship_to_location_used_for_estimate' => 'shipToLocationUsedForEstimate',
        'trademark_symbol' => 'trademarkSymbol',
        'type' => 'type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'additional_shipping_cost_per_unit' => 'setAdditionalShippingCostPerUnit',
        'cut_off_date_used_for_estimate' => 'setCutOffDateUsedForEstimate',
        'max_estimated_delivery_date' => 'setMaxEstimatedDeliveryDate',
        'min_estimated_delivery_date' => 'setMinEstimatedDeliveryDate',
        'quantity_used_for_estimate' => 'setQuantityUsedForEstimate',
        'shipping_carrier_code' => 'setShippingCarrierCode',
        'shipping_cost' => 'setShippingCost',
        'shipping_cost_type' => 'setShippingCostType',
        'shipping_service_code' => 'setShippingServiceCode',
        'ship_to_location_used_for_estimate' => 'setShipToLocationUsedForEstimate',
        'trademark_symbol' => 'setTrademarkSymbol',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'additional_shipping_cost_per_unit' => 'getAdditionalShippingCostPerUnit',
        'cut_off_date_used_for_estimate' => 'getCutOffDateUsedForEstimate',
        'max_estimated_delivery_date' => 'getMaxEstimatedDeliveryDate',
        'min_estimated_delivery_date' => 'getMinEstimatedDeliveryDate',
        'quantity_used_for_estimate' => 'getQuantityUsedForEstimate',
        'shipping_carrier_code' => 'getShippingCarrierCode',
        'shipping_cost' => 'getShippingCost',
        'shipping_cost_type' => 'getShippingCostType',
        'shipping_service_code' => 'getShippingServiceCode',
        'ship_to_location_used_for_estimate' => 'getShipToLocationUsedForEstimate',
        'trademark_symbol' => 'getTrademarkSymbol',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['additional_shipping_cost_per_unit'] = isset($data['additional_shipping_cost_per_unit']) ? $data['additional_shipping_cost_per_unit'] : null;
        $this->container['cut_off_date_used_for_estimate'] = isset($data['cut_off_date_used_for_estimate']) ? $data['cut_off_date_used_for_estimate'] : null;
        $this->container['max_estimated_delivery_date'] = isset($data['max_estimated_delivery_date']) ? $data['max_estimated_delivery_date'] : null;
        $this->container['min_estimated_delivery_date'] = isset($data['min_estimated_delivery_date']) ? $data['min_estimated_delivery_date'] : null;
        $this->container['quantity_used_for_estimate'] = isset($data['quantity_used_for_estimate']) ? $data['quantity_used_for_estimate'] : null;
        $this->container['shipping_carrier_code'] = isset($data['shipping_carrier_code']) ? $data['shipping_carrier_code'] : null;
        $this->container['shipping_cost'] = isset($data['shipping_cost']) ? $data['shipping_cost'] : null;
        $this->container['shipping_cost_type'] = isset($data['shipping_cost_type']) ? $data['shipping_cost_type'] : null;
        $this->container['shipping_service_code'] = isset($data['shipping_service_code']) ? $data['shipping_service_code'] : null;
        $this->container['ship_to_location_used_for_estimate'] = isset($data['ship_to_location_used_for_estimate']) ? $data['ship_to_location_used_for_estimate'] : null;
        $this->container['trademark_symbol'] = isset($data['trademark_symbol']) ? $data['trademark_symbol'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets additional_shipping_cost_per_unit
     *
     * @return \Swagger\Client\Model\ConvertedAmount
     */
    public function getAdditionalShippingCostPerUnit()
    {
        return $this->container['additional_shipping_cost_per_unit'];
    }

    /**
     * Sets additional_shipping_cost_per_unit
     *
     * @param \Swagger\Client\Model\ConvertedAmount $additional_shipping_cost_per_unit additional_shipping_cost_per_unit
     *
     * @return $this
     */
    public function setAdditionalShippingCostPerUnit($additional_shipping_cost_per_unit)
    {
        $this->container['additional_shipping_cost_per_unit'] = $additional_shipping_cost_per_unit;

        return $this;
    }

    /**
     * Gets cut_off_date_used_for_estimate
     *
     * @return string
     */
    public function getCutOffDateUsedForEstimate()
    {
        return $this->container['cut_off_date_used_for_estimate'];
    }

    /**
     * Sets cut_off_date_used_for_estimate
     *
     * @param string $cut_off_date_used_for_estimate The deadline date that the item must be purchased by in order to be received by the buyer within the delivery window ( maxEstimatedDeliveryDate and minEstimatedDeliveryDate fields). This field is returned only for items that are eligible for 'Same Day Handling'. For these items, the value of this field is what is displayed in the Delivery line on the View Item page. This value is returned in UTC format (yyyy-MM-ddThh:mm:ss.sssZ), which you can convert into the local time of the buyer.
     *
     * @return $this
     */
    public function setCutOffDateUsedForEstimate($cut_off_date_used_for_estimate)
    {
        $this->container['cut_off_date_used_for_estimate'] = $cut_off_date_used_for_estimate;

        return $this;
    }

    /**
     * Gets max_estimated_delivery_date
     *
     * @return string
     */
    public function getMaxEstimatedDeliveryDate()
    {
        return $this->container['max_estimated_delivery_date'];
    }

    /**
     * Sets max_estimated_delivery_date
     *
     * @param string $max_estimated_delivery_date The end date of the delivery window (latest projected delivery date). This value is returned in UTC format (yyyy-MM-ddThh:mm:ss.sssZ), which you can convert into the local time of the buyer. Note: For the best accuracy, always include the location of where the item is be shipped in the contextualLocation values of the X-EBAY-C-ENDUSERCTX request header.
     *
     * @return $this
     */
    public function setMaxEstimatedDeliveryDate($max_estimated_delivery_date)
    {
        $this->container['max_estimated_delivery_date'] = $max_estimated_delivery_date;

        return $this;
    }

    /**
     * Gets min_estimated_delivery_date
     *
     * @return string
     */
    public function getMinEstimatedDeliveryDate()
    {
        return $this->container['min_estimated_delivery_date'];
    }

    /**
     * Sets min_estimated_delivery_date
     *
     * @param string $min_estimated_delivery_date The start date of the delivery window (earliest projected delivery date). This value is returned in UTC format (yyyy-MM-ddThh:mm:ss.sssZ), which you can convert into the local time of the buyer. Note: For the best accuracy, always include the location of where the item is be shipped in the contextualLocation values of the X-EBAY-C-ENDUSERCTX request header.
     *
     * @return $this
     */
    public function setMinEstimatedDeliveryDate($min_estimated_delivery_date)
    {
        $this->container['min_estimated_delivery_date'] = $min_estimated_delivery_date;

        return $this;
    }

    /**
     * Gets quantity_used_for_estimate
     *
     * @return int
     */
    public function getQuantityUsedForEstimate()
    {
        return $this->container['quantity_used_for_estimate'];
    }

    /**
     * Sets quantity_used_for_estimate
     *
     * @param int $quantity_used_for_estimate The number of items used when calculating the estimation information.
     *
     * @return $this
     */
    public function setQuantityUsedForEstimate($quantity_used_for_estimate)
    {
        $this->container['quantity_used_for_estimate'] = $quantity_used_for_estimate;

        return $this;
    }

    /**
     * Gets shipping_carrier_code
     *
     * @return string
     */
    public function getShippingCarrierCode()
    {
        return $this->container['shipping_carrier_code'];
    }

    /**
     * Sets shipping_carrier_code
     *
     * @param string $shipping_carrier_code A name of the shipping provider, such as FedEx, or USPS.
     *
     * @return $this
     */
    public function setShippingCarrierCode($shipping_carrier_code)
    {
        $this->container['shipping_carrier_code'] = $shipping_carrier_code;

        return $this;
    }

    /**
     * Gets shipping_cost
     *
     * @return \Swagger\Client\Model\ConvertedAmount
     */
    public function getShippingCost()
    {
        return $this->container['shipping_cost'];
    }

    /**
     * Sets shipping_cost
     *
     * @param \Swagger\Client\Model\ConvertedAmount $shipping_cost shipping_cost
     *
     * @return $this
     */
    public function setShippingCost($shipping_cost)
    {
        $this->container['shipping_cost'] = $shipping_cost;

        return $this;
    }

    /**
     * Gets shipping_cost_type
     *
     * @return string
     */
    public function getShippingCostType()
    {
        return $this->container['shipping_cost_type'];
    }

    /**
     * Sets shipping_cost_type
     *
     * @param string $shipping_cost_type Indicates the class of the shipping cost. Valid Values: Flat or Calculated. Code so that your app gracefully handles any future changes to this list.
     *
     * @return $this
     */
    public function setShippingCostType($shipping_cost_type)
    {
        $this->container['shipping_cost_type'] = $shipping_cost_type;

        return $this;
    }

    /**
     * Gets shipping_service_code
     *
     * @return string
     */
    public function getShippingServiceCode()
    {
        return $this->container['shipping_service_code'];
    }

    /**
     * Sets shipping_service_code
     *
     * @param string $shipping_service_code The type of shipping service. For example, USPS First Class.
     *
     * @return $this
     */
    public function setShippingServiceCode($shipping_service_code)
    {
        $this->container['shipping_service_code'] = $shipping_service_code;

        return $this;
    }

    /**
     * Gets ship_to_location_used_for_estimate
     *
     * @return \Swagger\Client\Model\ShipToLocation
     */
    public function getShipToLocationUsedForEstimate()
    {
        return $this->container['ship_to_location_used_for_estimate'];
    }

    /**
     * Sets ship_to_location_used_for_estimate
     *
     * @param \Swagger\Client\Model\ShipToLocation $ship_to_location_used_for_estimate ship_to_location_used_for_estimate
     *
     * @return $this
     */
    public function setShipToLocationUsedForEstimate($ship_to_location_used_for_estimate)
    {
        $this->container['ship_to_location_used_for_estimate'] = $ship_to_location_used_for_estimate;

        return $this;
    }

    /**
     * Gets trademark_symbol
     *
     * @return string
     */
    public function getTrademarkSymbol()
    {
        return $this->container['trademark_symbol'];
    }

    /**
     * Sets trademark_symbol
     *
     * @param string $trademark_symbol Any trademark symbol, such as &trade; or &reg;, that needs to be shown in superscript next to the shipping service name.
     *
     * @return $this
     */
    public function setTrademarkSymbol($trademark_symbol)
    {
        $this->container['trademark_symbol'] = $trademark_symbol;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type The type of a shipping option, such as EXPEDITED, ONE_DAY, STANDARD, ECONOMY, PICKUP, etc.
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


