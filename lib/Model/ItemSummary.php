<?php
/**
 * ItemSummary
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API to View & Search for Items
 *
 * The Browse API lets shoppers search for specific items by keyword, category, product, or item aspects and retrieve the details of an item.
 *
 * OpenAPI spec version: v1_beta.10.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ItemSummary Class Doc Comment
 *
 * @category Class
 * @description The type that defines the item details for a specific item.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ItemSummary implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ItemSummary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'additional_images' => '\Swagger\Client\Model\Image[]',
        'adult_only' => 'bool',
        'bid_count' => 'int',
        'buying_options' => 'string[]',
        'categories' => '\Swagger\Client\Model\Category[]',
        'condition' => 'string',
        'condition_id' => 'string',
        'current_bid_price' => '\Swagger\Client\Model\ConvertedAmount',
        'distance_from_pickup_location' => '\Swagger\Client\Model\TargetLocation',
        'energy_efficiency_class' => 'string',
        'epid' => 'string',
        'image' => '\Swagger\Client\Model\Image',
        'item_affiliate_web_url' => 'string',
        'item_group_href' => 'string',
        'item_group_type' => 'string',
        'item_href' => 'string',
        'item_id' => 'string',
        'item_location' => '\Swagger\Client\Model\ItemLocationImpl',
        'item_web_url' => 'string',
        'marketing_price' => '\Swagger\Client\Model\MarketingPrice',
        'pickup_options' => '\Swagger\Client\Model\PickupOptionSummary[]',
        'price' => '\Swagger\Client\Model\ConvertedAmount',
        'seller' => '\Swagger\Client\Model\Seller0',
        'shipping_options' => '\Swagger\Client\Model\ShippingOptionSummary[]',
        'thumbnail_images' => '\Swagger\Client\Model\Image[]',
        'title' => 'string',
        'unit_price' => '\Swagger\Client\Model\ConvertedAmount',
        'unit_pricing_measure' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'additional_images' => null,
        'adult_only' => null,
        'bid_count' => null,
        'buying_options' => null,
        'categories' => null,
        'condition' => null,
        'condition_id' => null,
        'current_bid_price' => null,
        'distance_from_pickup_location' => null,
        'energy_efficiency_class' => null,
        'epid' => null,
        'image' => null,
        'item_affiliate_web_url' => null,
        'item_group_href' => null,
        'item_group_type' => null,
        'item_href' => null,
        'item_id' => null,
        'item_location' => null,
        'item_web_url' => null,
        'marketing_price' => null,
        'pickup_options' => null,
        'price' => null,
        'seller' => null,
        'shipping_options' => null,
        'thumbnail_images' => null,
        'title' => null,
        'unit_price' => null,
        'unit_pricing_measure' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'additional_images' => 'additionalImages',
        'adult_only' => 'adultOnly',
        'bid_count' => 'bidCount',
        'buying_options' => 'buyingOptions',
        'categories' => 'categories',
        'condition' => 'condition',
        'condition_id' => 'conditionId',
        'current_bid_price' => 'currentBidPrice',
        'distance_from_pickup_location' => 'distanceFromPickupLocation',
        'energy_efficiency_class' => 'energyEfficiencyClass',
        'epid' => 'epid',
        'image' => 'image',
        'item_affiliate_web_url' => 'itemAffiliateWebUrl',
        'item_group_href' => 'itemGroupHref',
        'item_group_type' => 'itemGroupType',
        'item_href' => 'itemHref',
        'item_id' => 'itemId',
        'item_location' => 'itemLocation',
        'item_web_url' => 'itemWebUrl',
        'marketing_price' => 'marketingPrice',
        'pickup_options' => 'pickupOptions',
        'price' => 'price',
        'seller' => 'seller',
        'shipping_options' => 'shippingOptions',
        'thumbnail_images' => 'thumbnailImages',
        'title' => 'title',
        'unit_price' => 'unitPrice',
        'unit_pricing_measure' => 'unitPricingMeasure'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'additional_images' => 'setAdditionalImages',
        'adult_only' => 'setAdultOnly',
        'bid_count' => 'setBidCount',
        'buying_options' => 'setBuyingOptions',
        'categories' => 'setCategories',
        'condition' => 'setCondition',
        'condition_id' => 'setConditionId',
        'current_bid_price' => 'setCurrentBidPrice',
        'distance_from_pickup_location' => 'setDistanceFromPickupLocation',
        'energy_efficiency_class' => 'setEnergyEfficiencyClass',
        'epid' => 'setEpid',
        'image' => 'setImage',
        'item_affiliate_web_url' => 'setItemAffiliateWebUrl',
        'item_group_href' => 'setItemGroupHref',
        'item_group_type' => 'setItemGroupType',
        'item_href' => 'setItemHref',
        'item_id' => 'setItemId',
        'item_location' => 'setItemLocation',
        'item_web_url' => 'setItemWebUrl',
        'marketing_price' => 'setMarketingPrice',
        'pickup_options' => 'setPickupOptions',
        'price' => 'setPrice',
        'seller' => 'setSeller',
        'shipping_options' => 'setShippingOptions',
        'thumbnail_images' => 'setThumbnailImages',
        'title' => 'setTitle',
        'unit_price' => 'setUnitPrice',
        'unit_pricing_measure' => 'setUnitPricingMeasure'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'additional_images' => 'getAdditionalImages',
        'adult_only' => 'getAdultOnly',
        'bid_count' => 'getBidCount',
        'buying_options' => 'getBuyingOptions',
        'categories' => 'getCategories',
        'condition' => 'getCondition',
        'condition_id' => 'getConditionId',
        'current_bid_price' => 'getCurrentBidPrice',
        'distance_from_pickup_location' => 'getDistanceFromPickupLocation',
        'energy_efficiency_class' => 'getEnergyEfficiencyClass',
        'epid' => 'getEpid',
        'image' => 'getImage',
        'item_affiliate_web_url' => 'getItemAffiliateWebUrl',
        'item_group_href' => 'getItemGroupHref',
        'item_group_type' => 'getItemGroupType',
        'item_href' => 'getItemHref',
        'item_id' => 'getItemId',
        'item_location' => 'getItemLocation',
        'item_web_url' => 'getItemWebUrl',
        'marketing_price' => 'getMarketingPrice',
        'pickup_options' => 'getPickupOptions',
        'price' => 'getPrice',
        'seller' => 'getSeller',
        'shipping_options' => 'getShippingOptions',
        'thumbnail_images' => 'getThumbnailImages',
        'title' => 'getTitle',
        'unit_price' => 'getUnitPrice',
        'unit_pricing_measure' => 'getUnitPricingMeasure'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['additional_images'] = isset($data['additional_images']) ? $data['additional_images'] : null;
        $this->container['adult_only'] = isset($data['adult_only']) ? $data['adult_only'] : null;
        $this->container['bid_count'] = isset($data['bid_count']) ? $data['bid_count'] : null;
        $this->container['buying_options'] = isset($data['buying_options']) ? $data['buying_options'] : null;
        $this->container['categories'] = isset($data['categories']) ? $data['categories'] : null;
        $this->container['condition'] = isset($data['condition']) ? $data['condition'] : null;
        $this->container['condition_id'] = isset($data['condition_id']) ? $data['condition_id'] : null;
        $this->container['current_bid_price'] = isset($data['current_bid_price']) ? $data['current_bid_price'] : null;
        $this->container['distance_from_pickup_location'] = isset($data['distance_from_pickup_location']) ? $data['distance_from_pickup_location'] : null;
        $this->container['energy_efficiency_class'] = isset($data['energy_efficiency_class']) ? $data['energy_efficiency_class'] : null;
        $this->container['epid'] = isset($data['epid']) ? $data['epid'] : null;
        $this->container['image'] = isset($data['image']) ? $data['image'] : null;
        $this->container['item_affiliate_web_url'] = isset($data['item_affiliate_web_url']) ? $data['item_affiliate_web_url'] : null;
        $this->container['item_group_href'] = isset($data['item_group_href']) ? $data['item_group_href'] : null;
        $this->container['item_group_type'] = isset($data['item_group_type']) ? $data['item_group_type'] : null;
        $this->container['item_href'] = isset($data['item_href']) ? $data['item_href'] : null;
        $this->container['item_id'] = isset($data['item_id']) ? $data['item_id'] : null;
        $this->container['item_location'] = isset($data['item_location']) ? $data['item_location'] : null;
        $this->container['item_web_url'] = isset($data['item_web_url']) ? $data['item_web_url'] : null;
        $this->container['marketing_price'] = isset($data['marketing_price']) ? $data['marketing_price'] : null;
        $this->container['pickup_options'] = isset($data['pickup_options']) ? $data['pickup_options'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['seller'] = isset($data['seller']) ? $data['seller'] : null;
        $this->container['shipping_options'] = isset($data['shipping_options']) ? $data['shipping_options'] : null;
        $this->container['thumbnail_images'] = isset($data['thumbnail_images']) ? $data['thumbnail_images'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['unit_price'] = isset($data['unit_price']) ? $data['unit_price'] : null;
        $this->container['unit_pricing_measure'] = isset($data['unit_pricing_measure']) ? $data['unit_pricing_measure'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets additional_images
     *
     * @return \Swagger\Client\Model\Image[]
     */
    public function getAdditionalImages()
    {
        return $this->container['additional_images'];
    }

    /**
     * Sets additional_images
     *
     * @param \Swagger\Client\Model\Image[] $additional_images This container is an array of URLs for Gallery Plus images of the item listing.
     *
     * @return $this
     */
    public function setAdditionalImages($additional_images)
    {
        $this->container['additional_images'] = $additional_images;

        return $this;
    }

    /**
     * Gets adult_only
     *
     * @return bool
     */
    public function getAdultOnly()
    {
        return $this->container['adult_only'];
    }

    /**
     * Sets adult_only
     *
     * @param bool $adult_only This indicates if the item is for adults only. For more information about adult-only items on eBay, see Adult items policy for sellers and Searching for adult only items for buyers.
     *
     * @return $this
     */
    public function setAdultOnly($adult_only)
    {
        $this->container['adult_only'] = $adult_only;

        return $this;
    }

    /**
     * Gets bid_count
     *
     * @return int
     */
    public function getBidCount()
    {
        return $this->container['bid_count'];
    }

    /**
     * Sets bid_count
     *
     * @param int $bid_count This integer value indicates the total number of bids that have been placed for an auction item. This field is only returned for auction listings.
     *
     * @return $this
     */
    public function setBidCount($bid_count)
    {
        $this->container['bid_count'] = $bid_count;

        return $this;
    }

    /**
     * Gets buying_options
     *
     * @return string[]
     */
    public function getBuyingOptions()
    {
        return $this->container['buying_options'];
    }

    /**
     * Sets buying_options
     *
     * @param string[] $buying_options The value returned in this field indicates the buying option for the item. FIXED_PRICE is returned for basic fixed-price listings, AUCTION is returned for auction listings without Buy It Now feature, and both FIXED_PRICE and AUCTION are returned for auction listings enabled with the Buy It Now feature.
     *
     * @return $this
     */
    public function setBuyingOptions($buying_options)
    {
        $this->container['buying_options'] = $buying_options;

        return $this;
    }

    /**
     * Gets categories
     *
     * @return \Swagger\Client\Model\Category[]
     */
    public function getCategories()
    {
        return $this->container['categories'];
    }

    /**
     * Sets categories
     *
     * @param \Swagger\Client\Model\Category[] $categories This container consists of the primary listing category Id of the item (as well as secondary listing category if item was listed in two categories).
     *
     * @return $this
     */
    public function setCategories($categories)
    {
        $this->container['categories'] = $categories;

        return $this;
    }

    /**
     * Gets condition
     *
     * @return string
     */
    public function getCondition()
    {
        return $this->container['condition'];
    }

    /**
     * Sets condition
     *
     * @param string $condition The condition of the item, such as New or Used.
     *
     * @return $this
     */
    public function setCondition($condition)
    {
        $this->container['condition'] = $condition;

        return $this;
    }

    /**
     * Gets condition_id
     *
     * @return string
     */
    public function getConditionId()
    {
        return $this->container['condition_id'];
    }

    /**
     * Sets condition_id
     *
     * @param string $condition_id The identifier of the condition. For example, 1000 is the identifier for NEW.
     *
     * @return $this
     */
    public function setConditionId($condition_id)
    {
        $this->container['condition_id'] = $condition_id;

        return $this;
    }

    /**
     * Gets current_bid_price
     *
     * @return \Swagger\Client\Model\ConvertedAmount
     */
    public function getCurrentBidPrice()
    {
        return $this->container['current_bid_price'];
    }

    /**
     * Sets current_bid_price
     *
     * @param \Swagger\Client\Model\ConvertedAmount $current_bid_price current_bid_price
     *
     * @return $this
     */
    public function setCurrentBidPrice($current_bid_price)
    {
        $this->container['current_bid_price'] = $current_bid_price;

        return $this;
    }

    /**
     * Gets distance_from_pickup_location
     *
     * @return \Swagger\Client\Model\TargetLocation
     */
    public function getDistanceFromPickupLocation()
    {
        return $this->container['distance_from_pickup_location'];
    }

    /**
     * Sets distance_from_pickup_location
     *
     * @param \Swagger\Client\Model\TargetLocation $distance_from_pickup_location distance_from_pickup_location
     *
     * @return $this
     */
    public function setDistanceFromPickupLocation($distance_from_pickup_location)
    {
        $this->container['distance_from_pickup_location'] = $distance_from_pickup_location;

        return $this;
    }

    /**
     * Gets energy_efficiency_class
     *
     * @return string
     */
    public function getEnergyEfficiencyClass()
    {
        return $this->container['energy_efficiency_class'];
    }

    /**
     * Sets energy_efficiency_class
     *
     * @param string $energy_efficiency_class The value returned in this field indicates the energy efficiency rating of the item. Energy efficiency ratings apply to products listed by commercial vendors in electronics categories only. Currently, this field is only applicable for the Germany site, and this field is only returned if the seller specified the energy efficiency rating through item specifics at listing time. Rating values include A+++, A++, A+, A, B, C, D, E, F, and G.
     *
     * @return $this
     */
    public function setEnergyEfficiencyClass($energy_efficiency_class)
    {
        $this->container['energy_efficiency_class'] = $energy_efficiency_class;

        return $this;
    }

    /**
     * Gets epid
     *
     * @return string
     */
    public function getEpid()
    {
        return $this->container['epid'];
    }

    /**
     * Sets epid
     *
     * @param string $epid An EPID is the eBay product identifier of a product from the eBay product catalog. This indicates the product in which the item belongs.
     *
     * @return $this
     */
    public function setEpid($epid)
    {
        $this->container['epid'] = $epid;

        return $this;
    }

    /**
     * Gets image
     *
     * @return \Swagger\Client\Model\Image
     */
    public function getImage()
    {
        return $this->container['image'];
    }

    /**
     * Sets image
     *
     * @param \Swagger\Client\Model\Image $image image
     *
     * @return $this
     */
    public function setImage($image)
    {
        $this->container['image'] = $image;

        return $this;
    }

    /**
     * Gets item_affiliate_web_url
     *
     * @return string
     */
    public function getItemAffiliateWebUrl()
    {
        return $this->container['item_affiliate_web_url'];
    }

    /**
     * Sets item_affiliate_web_url
     *
     * @param string $item_affiliate_web_url The URL to the View Item page of the item, which includes the affiliate tracking Id. This field is only returned if the seller enables affiliate tracking for the listing by including the X-EBAY-C-ENDUSERCTX request header in the call.
     *
     * @return $this
     */
    public function setItemAffiliateWebUrl($item_affiliate_web_url)
    {
        $this->container['item_affiliate_web_url'] = $item_affiliate_web_url;

        return $this;
    }

    /**
     * Gets item_group_href
     *
     * @return string
     */
    public function getItemGroupHref()
    {
        return $this->container['item_group_href'];
    }

    /**
     * Sets item_group_href
     *
     * @param string $item_group_href The HATEOAS reference of the parent page of the item group. An item group is an item that has various aspect differences, such as color, size, storage capacity, etc. Note: This field is returned only for item groups.
     *
     * @return $this
     */
    public function setItemGroupHref($item_group_href)
    {
        $this->container['item_group_href'] = $item_group_href;

        return $this;
    }

    /**
     * Gets item_group_type
     *
     * @return string
     */
    public function getItemGroupType()
    {
        return $this->container['item_group_type'];
    }

    /**
     * Sets item_group_type
     *
     * @param string $item_group_type Indicates the item group type. An item group is an item that has various aspect differences, such as color, size, storage capacity, etc. Currently only SELLER_DEFINED_VARIATIONS is supported and indicates this is an item group created by the seller. Note: This field is returned only for item groups.
     *
     * @return $this
     */
    public function setItemGroupType($item_group_type)
    {
        $this->container['item_group_type'] = $item_group_type;

        return $this;
    }

    /**
     * Gets item_href
     *
     * @return string
     */
    public function getItemHref()
    {
        return $this->container['item_href'];
    }

    /**
     * Sets item_href
     *
     * @param string $item_href The URI of the item. This field is always populated.
     *
     * @return $this
     */
    public function setItemHref($item_href)
    {
        $this->container['item_href'] = $item_href;

        return $this;
    }

    /**
     * Gets item_id
     *
     * @return string
     */
    public function getItemId()
    {
        return $this->container['item_id'];
    }

    /**
     * Sets item_id
     *
     * @param string $item_id The unique identifier of the item. For example: v1|150006693022|450002439078
     *
     * @return $this
     */
    public function setItemId($item_id)
    {
        $this->container['item_id'] = $item_id;

        return $this;
    }

    /**
     * Gets item_location
     *
     * @return \Swagger\Client\Model\ItemLocationImpl
     */
    public function getItemLocation()
    {
        return $this->container['item_location'];
    }

    /**
     * Sets item_location
     *
     * @param \Swagger\Client\Model\ItemLocationImpl $item_location item_location
     *
     * @return $this
     */
    public function setItemLocation($item_location)
    {
        $this->container['item_location'] = $item_location;

        return $this;
    }

    /**
     * Gets item_web_url
     *
     * @return string
     */
    public function getItemWebUrl()
    {
        return $this->container['item_web_url'];
    }

    /**
     * Sets item_web_url
     *
     * @param string $item_web_url The URL to the View Item page of the item.
     *
     * @return $this
     */
    public function setItemWebUrl($item_web_url)
    {
        $this->container['item_web_url'] = $item_web_url;

        return $this;
    }

    /**
     * Gets marketing_price
     *
     * @return \Swagger\Client\Model\MarketingPrice
     */
    public function getMarketingPrice()
    {
        return $this->container['marketing_price'];
    }

    /**
     * Sets marketing_price
     *
     * @param \Swagger\Client\Model\MarketingPrice $marketing_price marketing_price
     *
     * @return $this
     */
    public function setMarketingPrice($marketing_price)
    {
        $this->container['marketing_price'] = $marketing_price;

        return $this;
    }

    /**
     * Gets pickup_options
     *
     * @return \Swagger\Client\Model\PickupOptionSummary[]
     */
    public function getPickupOptions()
    {
        return $this->container['pickup_options'];
    }

    /**
     * Sets pickup_options
     *
     * @param \Swagger\Client\Model\PickupOptionSummary[] $pickup_options This container lists the local pickup options available to the buyer. This container is only returned if the user is searching for local pickup items and set the local pickup filters in the call request.
     *
     * @return $this
     */
    public function setPickupOptions($pickup_options)
    {
        $this->container['pickup_options'] = $pickup_options;

        return $this;
    }

    /**
     * Gets price
     *
     * @return \Swagger\Client\Model\ConvertedAmount
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param \Swagger\Client\Model\ConvertedAmount $price price
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets seller
     *
     * @return \Swagger\Client\Model\Seller0
     */
    public function getSeller()
    {
        return $this->container['seller'];
    }

    /**
     * Sets seller
     *
     * @param \Swagger\Client\Model\Seller0 $seller seller
     *
     * @return $this
     */
    public function setSeller($seller)
    {
        $this->container['seller'] = $seller;

        return $this;
    }

    /**
     * Gets shipping_options
     *
     * @return \Swagger\Client\Model\ShippingOptionSummary[]
     */
    public function getShippingOptions()
    {
        return $this->container['shipping_options'];
    }

    /**
     * Sets shipping_options
     *
     * @param \Swagger\Client\Model\ShippingOptionSummary[] $shipping_options This container returns the shipping options available to ship the item.
     *
     * @return $this
     */
    public function setShippingOptions($shipping_options)
    {
        $this->container['shipping_options'] = $shipping_options;

        return $this;
    }

    /**
     * Gets thumbnail_images
     *
     * @return \Swagger\Client\Model\Image[]
     */
    public function getThumbnailImages()
    {
        return $this->container['thumbnail_images'];
    }

    /**
     * Sets thumbnail_images
     *
     * @param \Swagger\Client\Model\Image[] $thumbnail_images This container is an array of thumbnail images for the item. For each image, the URL to the image is given.
     *
     * @return $this
     */
    public function setThumbnailImages($thumbnail_images)
    {
        $this->container['thumbnail_images'] = $thumbnail_images;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title The seller-created title of the item. The maximum length is 80 characters.
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets unit_price
     *
     * @return \Swagger\Client\Model\ConvertedAmount
     */
    public function getUnitPrice()
    {
        return $this->container['unit_price'];
    }

    /**
     * Sets unit_price
     *
     * @param \Swagger\Client\Model\ConvertedAmount $unit_price unit_price
     *
     * @return $this
     */
    public function setUnitPrice($unit_price)
    {
        $this->container['unit_price'] = $unit_price;

        return $this;
    }

    /**
     * Gets unit_pricing_measure
     *
     * @return string
     */
    public function getUnitPricingMeasure()
    {
        return $this->container['unit_pricing_measure'];
    }

    /**
     * Sets unit_pricing_measure
     *
     * @param string $unit_pricing_measure The designation, such as size, weight, volume, count, etc., that was used to specify the quantity of the item. This helps buyers compare prices. For example, the following tells the buyer that the item is 7.99 per 100 grams. &quot;unitPricingMeasure&quot;: &quot;100g&quot;, &quot;unitPrice&quot;: { &nbsp;&nbsp;&quot;value&quot;: &quot;7.99&quot;, &nbsp;&nbsp;&quot;currency&quot;: &quot;GBP&quot;
     *
     * @return $this
     */
    public function setUnitPricingMeasure($unit_pricing_measure)
    {
        $this->container['unit_pricing_measure'] = $unit_pricing_measure;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


