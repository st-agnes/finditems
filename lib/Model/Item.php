<?php
/**
 * Item
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API to View & Search for Items
 *
 * The Browse API lets shoppers search for specific items by keyword, category, product, or item aspects and retrieve the details of an item.
 *
 * OpenAPI spec version: v1_beta.10.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Item Class Doc Comment
 *
 * @category Class
 * @description Type that defines the fields for the item details for a specific item.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Item implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Item';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'additional_images' => '\Swagger\Client\Model\Image[]',
        'adult_only' => 'bool',
        'age_group' => 'string',
        'bid_count' => 'int',
        'brand' => 'string',
        'buying_options' => 'string[]',
        'category_id' => 'string',
        'category_path' => 'string',
        'color' => 'string',
        'condition' => 'string',
        'condition_id' => 'string',
        'current_bid_price' => '\Swagger\Client\Model\ConvertedAmount',
        'description' => 'string',
        'energy_efficiency_class' => 'string',
        'epid' => 'string',
        'estimated_availabilities' => '\Swagger\Client\Model\EstimatedAvailability[]',
        'gender' => 'string',
        'gtin' => 'string',
        'image' => '\Swagger\Client\Model\Image',
        'item_affiliate_web_url' => 'string',
        'item_end_date' => 'string',
        'item_id' => 'string',
        'item_location' => '\Swagger\Client\Model\Address',
        'item_web_url' => 'string',
        'localized_aspects' => '\Swagger\Client\Model\TypedNameValue[]',
        'marketing_price' => '\Swagger\Client\Model\MarketingPrice',
        'material' => 'string',
        'mpn' => 'string',
        'pattern' => 'string',
        'price' => '\Swagger\Client\Model\ConvertedAmount',
        'price_display_condition' => 'string',
        'primary_item_group' => '\Swagger\Client\Model\ItemGroupSummary',
        'primary_product_review_rating' => '\Swagger\Client\Model\ReviewRating',
        'product' => '\Swagger\Client\Model\Product',
        'product_fiche_web_url' => 'string',
        'quantity_limit_per_buyer' => 'int',
        'return_terms' => '\Swagger\Client\Model\ItemReturnTerms',
        'seller' => '\Swagger\Client\Model\Seller',
        'seller_item_revision' => 'string',
        'shipping_options' => '\Swagger\Client\Model\ShippingOption[]',
        'ship_to_locations' => '\Swagger\Client\Model\ShipToLocations',
        'short_description' => 'string',
        'size' => 'string',
        'size_system' => 'string',
        'size_type' => 'string',
        'subtitle' => 'string',
        'taxes' => '\Swagger\Client\Model\Taxes[]',
        'title' => 'string',
        'top_rated_buying_experience' => 'bool',
        'unique_bidder_count' => 'int',
        'unit_price' => '\Swagger\Client\Model\ConvertedAmount',
        'unit_pricing_measure' => 'string',
        'warnings' => '\Swagger\Client\Model\Error[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'additional_images' => null,
        'adult_only' => null,
        'age_group' => null,
        'bid_count' => null,
        'brand' => null,
        'buying_options' => null,
        'category_id' => null,
        'category_path' => null,
        'color' => null,
        'condition' => null,
        'condition_id' => null,
        'current_bid_price' => null,
        'description' => null,
        'energy_efficiency_class' => null,
        'epid' => null,
        'estimated_availabilities' => null,
        'gender' => null,
        'gtin' => null,
        'image' => null,
        'item_affiliate_web_url' => null,
        'item_end_date' => null,
        'item_id' => null,
        'item_location' => null,
        'item_web_url' => null,
        'localized_aspects' => null,
        'marketing_price' => null,
        'material' => null,
        'mpn' => null,
        'pattern' => null,
        'price' => null,
        'price_display_condition' => null,
        'primary_item_group' => null,
        'primary_product_review_rating' => null,
        'product' => null,
        'product_fiche_web_url' => null,
        'quantity_limit_per_buyer' => null,
        'return_terms' => null,
        'seller' => null,
        'seller_item_revision' => null,
        'shipping_options' => null,
        'ship_to_locations' => null,
        'short_description' => null,
        'size' => null,
        'size_system' => null,
        'size_type' => null,
        'subtitle' => null,
        'taxes' => null,
        'title' => null,
        'top_rated_buying_experience' => null,
        'unique_bidder_count' => null,
        'unit_price' => null,
        'unit_pricing_measure' => null,
        'warnings' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'additional_images' => 'additionalImages',
        'adult_only' => 'adultOnly',
        'age_group' => 'ageGroup',
        'bid_count' => 'bidCount',
        'brand' => 'brand',
        'buying_options' => 'buyingOptions',
        'category_id' => 'categoryId',
        'category_path' => 'categoryPath',
        'color' => 'color',
        'condition' => 'condition',
        'condition_id' => 'conditionId',
        'current_bid_price' => 'currentBidPrice',
        'description' => 'description',
        'energy_efficiency_class' => 'energyEfficiencyClass',
        'epid' => 'epid',
        'estimated_availabilities' => 'estimatedAvailabilities',
        'gender' => 'gender',
        'gtin' => 'gtin',
        'image' => 'image',
        'item_affiliate_web_url' => 'itemAffiliateWebUrl',
        'item_end_date' => 'itemEndDate',
        'item_id' => 'itemId',
        'item_location' => 'itemLocation',
        'item_web_url' => 'itemWebUrl',
        'localized_aspects' => 'localizedAspects',
        'marketing_price' => 'marketingPrice',
        'material' => 'material',
        'mpn' => 'mpn',
        'pattern' => 'pattern',
        'price' => 'price',
        'price_display_condition' => 'priceDisplayCondition',
        'primary_item_group' => 'primaryItemGroup',
        'primary_product_review_rating' => 'primaryProductReviewRating',
        'product' => 'product',
        'product_fiche_web_url' => 'productFicheWebUrl',
        'quantity_limit_per_buyer' => 'quantityLimitPerBuyer',
        'return_terms' => 'returnTerms',
        'seller' => 'seller',
        'seller_item_revision' => 'sellerItemRevision',
        'shipping_options' => 'shippingOptions',
        'ship_to_locations' => 'shipToLocations',
        'short_description' => 'shortDescription',
        'size' => 'size',
        'size_system' => 'sizeSystem',
        'size_type' => 'sizeType',
        'subtitle' => 'subtitle',
        'taxes' => 'taxes',
        'title' => 'title',
        'top_rated_buying_experience' => 'topRatedBuyingExperience',
        'unique_bidder_count' => 'uniqueBidderCount',
        'unit_price' => 'unitPrice',
        'unit_pricing_measure' => 'unitPricingMeasure',
        'warnings' => 'warnings'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'additional_images' => 'setAdditionalImages',
        'adult_only' => 'setAdultOnly',
        'age_group' => 'setAgeGroup',
        'bid_count' => 'setBidCount',
        'brand' => 'setBrand',
        'buying_options' => 'setBuyingOptions',
        'category_id' => 'setCategoryId',
        'category_path' => 'setCategoryPath',
        'color' => 'setColor',
        'condition' => 'setCondition',
        'condition_id' => 'setConditionId',
        'current_bid_price' => 'setCurrentBidPrice',
        'description' => 'setDescription',
        'energy_efficiency_class' => 'setEnergyEfficiencyClass',
        'epid' => 'setEpid',
        'estimated_availabilities' => 'setEstimatedAvailabilities',
        'gender' => 'setGender',
        'gtin' => 'setGtin',
        'image' => 'setImage',
        'item_affiliate_web_url' => 'setItemAffiliateWebUrl',
        'item_end_date' => 'setItemEndDate',
        'item_id' => 'setItemId',
        'item_location' => 'setItemLocation',
        'item_web_url' => 'setItemWebUrl',
        'localized_aspects' => 'setLocalizedAspects',
        'marketing_price' => 'setMarketingPrice',
        'material' => 'setMaterial',
        'mpn' => 'setMpn',
        'pattern' => 'setPattern',
        'price' => 'setPrice',
        'price_display_condition' => 'setPriceDisplayCondition',
        'primary_item_group' => 'setPrimaryItemGroup',
        'primary_product_review_rating' => 'setPrimaryProductReviewRating',
        'product' => 'setProduct',
        'product_fiche_web_url' => 'setProductFicheWebUrl',
        'quantity_limit_per_buyer' => 'setQuantityLimitPerBuyer',
        'return_terms' => 'setReturnTerms',
        'seller' => 'setSeller',
        'seller_item_revision' => 'setSellerItemRevision',
        'shipping_options' => 'setShippingOptions',
        'ship_to_locations' => 'setShipToLocations',
        'short_description' => 'setShortDescription',
        'size' => 'setSize',
        'size_system' => 'setSizeSystem',
        'size_type' => 'setSizeType',
        'subtitle' => 'setSubtitle',
        'taxes' => 'setTaxes',
        'title' => 'setTitle',
        'top_rated_buying_experience' => 'setTopRatedBuyingExperience',
        'unique_bidder_count' => 'setUniqueBidderCount',
        'unit_price' => 'setUnitPrice',
        'unit_pricing_measure' => 'setUnitPricingMeasure',
        'warnings' => 'setWarnings'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'additional_images' => 'getAdditionalImages',
        'adult_only' => 'getAdultOnly',
        'age_group' => 'getAgeGroup',
        'bid_count' => 'getBidCount',
        'brand' => 'getBrand',
        'buying_options' => 'getBuyingOptions',
        'category_id' => 'getCategoryId',
        'category_path' => 'getCategoryPath',
        'color' => 'getColor',
        'condition' => 'getCondition',
        'condition_id' => 'getConditionId',
        'current_bid_price' => 'getCurrentBidPrice',
        'description' => 'getDescription',
        'energy_efficiency_class' => 'getEnergyEfficiencyClass',
        'epid' => 'getEpid',
        'estimated_availabilities' => 'getEstimatedAvailabilities',
        'gender' => 'getGender',
        'gtin' => 'getGtin',
        'image' => 'getImage',
        'item_affiliate_web_url' => 'getItemAffiliateWebUrl',
        'item_end_date' => 'getItemEndDate',
        'item_id' => 'getItemId',
        'item_location' => 'getItemLocation',
        'item_web_url' => 'getItemWebUrl',
        'localized_aspects' => 'getLocalizedAspects',
        'marketing_price' => 'getMarketingPrice',
        'material' => 'getMaterial',
        'mpn' => 'getMpn',
        'pattern' => 'getPattern',
        'price' => 'getPrice',
        'price_display_condition' => 'getPriceDisplayCondition',
        'primary_item_group' => 'getPrimaryItemGroup',
        'primary_product_review_rating' => 'getPrimaryProductReviewRating',
        'product' => 'getProduct',
        'product_fiche_web_url' => 'getProductFicheWebUrl',
        'quantity_limit_per_buyer' => 'getQuantityLimitPerBuyer',
        'return_terms' => 'getReturnTerms',
        'seller' => 'getSeller',
        'seller_item_revision' => 'getSellerItemRevision',
        'shipping_options' => 'getShippingOptions',
        'ship_to_locations' => 'getShipToLocations',
        'short_description' => 'getShortDescription',
        'size' => 'getSize',
        'size_system' => 'getSizeSystem',
        'size_type' => 'getSizeType',
        'subtitle' => 'getSubtitle',
        'taxes' => 'getTaxes',
        'title' => 'getTitle',
        'top_rated_buying_experience' => 'getTopRatedBuyingExperience',
        'unique_bidder_count' => 'getUniqueBidderCount',
        'unit_price' => 'getUnitPrice',
        'unit_pricing_measure' => 'getUnitPricingMeasure',
        'warnings' => 'getWarnings'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['additional_images'] = isset($data['additional_images']) ? $data['additional_images'] : null;
        $this->container['adult_only'] = isset($data['adult_only']) ? $data['adult_only'] : null;
        $this->container['age_group'] = isset($data['age_group']) ? $data['age_group'] : null;
        $this->container['bid_count'] = isset($data['bid_count']) ? $data['bid_count'] : null;
        $this->container['brand'] = isset($data['brand']) ? $data['brand'] : null;
        $this->container['buying_options'] = isset($data['buying_options']) ? $data['buying_options'] : null;
        $this->container['category_id'] = isset($data['category_id']) ? $data['category_id'] : null;
        $this->container['category_path'] = isset($data['category_path']) ? $data['category_path'] : null;
        $this->container['color'] = isset($data['color']) ? $data['color'] : null;
        $this->container['condition'] = isset($data['condition']) ? $data['condition'] : null;
        $this->container['condition_id'] = isset($data['condition_id']) ? $data['condition_id'] : null;
        $this->container['current_bid_price'] = isset($data['current_bid_price']) ? $data['current_bid_price'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['energy_efficiency_class'] = isset($data['energy_efficiency_class']) ? $data['energy_efficiency_class'] : null;
        $this->container['epid'] = isset($data['epid']) ? $data['epid'] : null;
        $this->container['estimated_availabilities'] = isset($data['estimated_availabilities']) ? $data['estimated_availabilities'] : null;
        $this->container['gender'] = isset($data['gender']) ? $data['gender'] : null;
        $this->container['gtin'] = isset($data['gtin']) ? $data['gtin'] : null;
        $this->container['image'] = isset($data['image']) ? $data['image'] : null;
        $this->container['item_affiliate_web_url'] = isset($data['item_affiliate_web_url']) ? $data['item_affiliate_web_url'] : null;
        $this->container['item_end_date'] = isset($data['item_end_date']) ? $data['item_end_date'] : null;
        $this->container['item_id'] = isset($data['item_id']) ? $data['item_id'] : null;
        $this->container['item_location'] = isset($data['item_location']) ? $data['item_location'] : null;
        $this->container['item_web_url'] = isset($data['item_web_url']) ? $data['item_web_url'] : null;
        $this->container['localized_aspects'] = isset($data['localized_aspects']) ? $data['localized_aspects'] : null;
        $this->container['marketing_price'] = isset($data['marketing_price']) ? $data['marketing_price'] : null;
        $this->container['material'] = isset($data['material']) ? $data['material'] : null;
        $this->container['mpn'] = isset($data['mpn']) ? $data['mpn'] : null;
        $this->container['pattern'] = isset($data['pattern']) ? $data['pattern'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['price_display_condition'] = isset($data['price_display_condition']) ? $data['price_display_condition'] : null;
        $this->container['primary_item_group'] = isset($data['primary_item_group']) ? $data['primary_item_group'] : null;
        $this->container['primary_product_review_rating'] = isset($data['primary_product_review_rating']) ? $data['primary_product_review_rating'] : null;
        $this->container['product'] = isset($data['product']) ? $data['product'] : null;
        $this->container['product_fiche_web_url'] = isset($data['product_fiche_web_url']) ? $data['product_fiche_web_url'] : null;
        $this->container['quantity_limit_per_buyer'] = isset($data['quantity_limit_per_buyer']) ? $data['quantity_limit_per_buyer'] : null;
        $this->container['return_terms'] = isset($data['return_terms']) ? $data['return_terms'] : null;
        $this->container['seller'] = isset($data['seller']) ? $data['seller'] : null;
        $this->container['seller_item_revision'] = isset($data['seller_item_revision']) ? $data['seller_item_revision'] : null;
        $this->container['shipping_options'] = isset($data['shipping_options']) ? $data['shipping_options'] : null;
        $this->container['ship_to_locations'] = isset($data['ship_to_locations']) ? $data['ship_to_locations'] : null;
        $this->container['short_description'] = isset($data['short_description']) ? $data['short_description'] : null;
        $this->container['size'] = isset($data['size']) ? $data['size'] : null;
        $this->container['size_system'] = isset($data['size_system']) ? $data['size_system'] : null;
        $this->container['size_type'] = isset($data['size_type']) ? $data['size_type'] : null;
        $this->container['subtitle'] = isset($data['subtitle']) ? $data['subtitle'] : null;
        $this->container['taxes'] = isset($data['taxes']) ? $data['taxes'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['top_rated_buying_experience'] = isset($data['top_rated_buying_experience']) ? $data['top_rated_buying_experience'] : null;
        $this->container['unique_bidder_count'] = isset($data['unique_bidder_count']) ? $data['unique_bidder_count'] : null;
        $this->container['unit_price'] = isset($data['unit_price']) ? $data['unit_price'] : null;
        $this->container['unit_pricing_measure'] = isset($data['unit_pricing_measure']) ? $data['unit_pricing_measure'] : null;
        $this->container['warnings'] = isset($data['warnings']) ? $data['warnings'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets additional_images
     *
     * @return \Swagger\Client\Model\Image[]
     */
    public function getAdditionalImages()
    {
        return $this->container['additional_images'];
    }

    /**
     * Sets additional_images
     *
     * @param \Swagger\Client\Model\Image[] $additional_images An array of containers with the URLs for the images that are in addition to the primary image. The primary image is returned in the image.imageUrl field.
     *
     * @return $this
     */
    public function setAdditionalImages($additional_images)
    {
        $this->container['additional_images'] = $additional_images;

        return $this;
    }

    /**
     * Gets adult_only
     *
     * @return bool
     */
    public function getAdultOnly()
    {
        return $this->container['adult_only'];
    }

    /**
     * Sets adult_only
     *
     * @param bool $adult_only This indicates if the item is for adults only. For more information about adult-only items on eBay, see Adult items policy for sellers and Searching for adult only items for buyers.
     *
     * @return $this
     */
    public function setAdultOnly($adult_only)
    {
        $this->container['adult_only'] = $adult_only;

        return $this;
    }

    /**
     * Gets age_group
     *
     * @return string
     */
    public function getAgeGroup()
    {
        return $this->container['age_group'];
    }

    /**
     * Sets age_group
     *
     * @param string $age_group (Primary Item Aspect) The age group for which the product is recommended. For example, newborn, infant, toddler, kids, adult, etc. All the item aspects, including this aspect, are returned in the localizedAspects container.
     *
     * @return $this
     */
    public function setAgeGroup($age_group)
    {
        $this->container['age_group'] = $age_group;

        return $this;
    }

    /**
     * Gets bid_count
     *
     * @return int
     */
    public function getBidCount()
    {
        return $this->container['bid_count'];
    }

    /**
     * Sets bid_count
     *
     * @param int $bid_count This integer value indicates the total number of bids that have been placed against an auction item. This field is returned only for auction listings.
     *
     * @return $this
     */
    public function setBidCount($bid_count)
    {
        $this->container['bid_count'] = $bid_count;

        return $this;
    }

    /**
     * Gets brand
     *
     * @return string
     */
    public function getBrand()
    {
        return $this->container['brand'];
    }

    /**
     * Sets brand
     *
     * @param string $brand (Primary Item Aspect) The name brand of the item, such as Nike, Apple, etc. All the item aspects, including this aspect, are returned in the localizedAspects container.
     *
     * @return $this
     */
    public function setBrand($brand)
    {
        $this->container['brand'] = $brand;

        return $this;
    }

    /**
     * Gets buying_options
     *
     * @return string[]
     */
    public function getBuyingOptions()
    {
        return $this->container['buying_options'];
    }

    /**
     * Sets buying_options
     *
     * @param string[] $buying_options A list of purchase options available for the item, such as FIXED PRICE.
     *
     * @return $this
     */
    public function setBuyingOptions($buying_options)
    {
        $this->container['buying_options'] = $buying_options;

        return $this;
    }

    /**
     * Gets category_id
     *
     * @return string
     */
    public function getCategoryId()
    {
        return $this->container['category_id'];
    }

    /**
     * Sets category_id
     *
     * @param string $category_id The Id of the leaf category for this item. A left category is the lowest level in the category tree. This category has no children.
     *
     * @return $this
     */
    public function setCategoryId($category_id)
    {
        $this->container['category_id'] = $category_id;

        return $this;
    }

    /**
     * Gets category_path
     *
     * @return string
     */
    public function getCategoryPath()
    {
        return $this->container['category_path'];
    }

    /**
     * Sets category_path
     *
     * @param string $category_path Text that shows the category hierarchy of the item. For example: Computers/Tablets &amp; Networking, Laptops &amp; Netbooks, PC Laptops &amp; Netbooks
     *
     * @return $this
     */
    public function setCategoryPath($category_path)
    {
        $this->container['category_path'] = $category_path;

        return $this;
    }

    /**
     * Gets color
     *
     * @return string
     */
    public function getColor()
    {
        return $this->container['color'];
    }

    /**
     * Sets color
     *
     * @param string $color (Primary Item Aspect) Text describing the color of the item. All the item aspects, including this aspect, are returned in the localizedAspects container.
     *
     * @return $this
     */
    public function setColor($color)
    {
        $this->container['color'] = $color;

        return $this;
    }

    /**
     * Gets condition
     *
     * @return string
     */
    public function getCondition()
    {
        return $this->container['condition'];
    }

    /**
     * Sets condition
     *
     * @param string $condition The name of the condition of the item, such as New or Used.
     *
     * @return $this
     */
    public function setCondition($condition)
    {
        $this->container['condition'] = $condition;

        return $this;
    }

    /**
     * Gets condition_id
     *
     * @return string
     */
    public function getConditionId()
    {
        return $this->container['condition_id'];
    }

    /**
     * Sets condition_id
     *
     * @param string $condition_id The identifier of the condition. For example, 1000 is the identifier for NEW.
     *
     * @return $this
     */
    public function setConditionId($condition_id)
    {
        $this->container['condition_id'] = $condition_id;

        return $this;
    }

    /**
     * Gets current_bid_price
     *
     * @return \Swagger\Client\Model\ConvertedAmount
     */
    public function getCurrentBidPrice()
    {
        return $this->container['current_bid_price'];
    }

    /**
     * Sets current_bid_price
     *
     * @param \Swagger\Client\Model\ConvertedAmount $current_bid_price current_bid_price
     *
     * @return $this
     */
    public function setCurrentBidPrice($current_bid_price)
    {
        $this->container['current_bid_price'] = $current_bid_price;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description The full description of the item that was created by the seller. This can be plain text or rich content.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets energy_efficiency_class
     *
     * @return string
     */
    public function getEnergyEfficiencyClass()
    {
        return $this->container['energy_efficiency_class'];
    }

    /**
     * Sets energy_efficiency_class
     *
     * @param string $energy_efficiency_class Indicates the European energy efficiency rating (EEK) of the item. This field is returned only if the seller specified the energy efficiency rating. The rating is a set of energy efficiency classes from A to G, where 'A' is the most energy efficient and 'G' is the least efficient. This rating helps buyers choose between various models. When the manufacturer's specifications for this item are available, the link to this information is returned in the productFicheWebUrl field.
     *
     * @return $this
     */
    public function setEnergyEfficiencyClass($energy_efficiency_class)
    {
        $this->container['energy_efficiency_class'] = $energy_efficiency_class;

        return $this;
    }

    /**
     * Gets epid
     *
     * @return string
     */
    public function getEpid()
    {
        return $this->container['epid'];
    }

    /**
     * Sets epid
     *
     * @param string $epid An EPID is the eBay product identifier of a product from the eBay product catalog. This indicates the product in which the item belongs.
     *
     * @return $this
     */
    public function setEpid($epid)
    {
        $this->container['epid'] = $epid;

        return $this;
    }

    /**
     * Gets estimated_availabilities
     *
     * @return \Swagger\Client\Model\EstimatedAvailability[]
     */
    public function getEstimatedAvailabilities()
    {
        return $this->container['estimated_availabilities'];
    }

    /**
     * Sets estimated_availabilities
     *
     * @param \Swagger\Client\Model\EstimatedAvailability[] $estimated_availabilities The container that returns the item availability information. Because the quantity of an item can change several times within a few seconds, it is impossible to return the exact quantity. So instead of returning quantity, this returns the availability of the item based on the threshold the seller has set.
     *
     * @return $this
     */
    public function setEstimatedAvailabilities($estimated_availabilities)
    {
        $this->container['estimated_availabilities'] = $estimated_availabilities;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string $gender (Primary Item Aspect) The gender for the item. This is used for items that could vary by gender, such as clothing. For example: male, female, or unisex. All the item aspects, including this aspect, are returned in the localizedAspects container.
     *
     * @return $this
     */
    public function setGender($gender)
    {
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets gtin
     *
     * @return string
     */
    public function getGtin()
    {
        return $this->container['gtin'];
    }

    /**
     * Sets gtin
     *
     * @param string $gtin The unique Global Trade Item number of the item as defined by http://www.gtin.info. This can be a UPC (Universal Product Code), EAN (European Article Number), or an ISBN (International Standard Book Number) value.
     *
     * @return $this
     */
    public function setGtin($gtin)
    {
        $this->container['gtin'] = $gtin;

        return $this;
    }

    /**
     * Gets image
     *
     * @return \Swagger\Client\Model\Image
     */
    public function getImage()
    {
        return $this->container['image'];
    }

    /**
     * Sets image
     *
     * @param \Swagger\Client\Model\Image $image image
     *
     * @return $this
     */
    public function setImage($image)
    {
        $this->container['image'] = $image;

        return $this;
    }

    /**
     * Gets item_affiliate_web_url
     *
     * @return string
     */
    public function getItemAffiliateWebUrl()
    {
        return $this->container['item_affiliate_web_url'];
    }

    /**
     * Sets item_affiliate_web_url
     *
     * @param string $item_affiliate_web_url The URL of the View Item page of the item, which includes the affiliate tracking Id. This field is only returned if the seller enables affiliate tracking for the listing by including the X-EBAY-C-ENDUSERCTX request header in the call.
     *
     * @return $this
     */
    public function setItemAffiliateWebUrl($item_affiliate_web_url)
    {
        $this->container['item_affiliate_web_url'] = $item_affiliate_web_url;

        return $this;
    }

    /**
     * Gets item_end_date
     *
     * @return string
     */
    public function getItemEndDate()
    {
        return $this->container['item_end_date'];
    }

    /**
     * Sets item_end_date
     *
     * @param string $item_end_date The date and time up to which the items can be purchased. This value is returned in UTC format (yyyy-MM-ddThh:mm:ss.sssZ), which you can convert into the local time of the buyer.
     *
     * @return $this
     */
    public function setItemEndDate($item_end_date)
    {
        $this->container['item_end_date'] = $item_end_date;

        return $this;
    }

    /**
     * Gets item_id
     *
     * @return string
     */
    public function getItemId()
    {
        return $this->container['item_id'];
    }

    /**
     * Sets item_id
     *
     * @param string $item_id The unique identifier of the item. Example: v1|150006693022|450002439078
     *
     * @return $this
     */
    public function setItemId($item_id)
    {
        $this->container['item_id'] = $item_id;

        return $this;
    }

    /**
     * Gets item_location
     *
     * @return \Swagger\Client\Model\Address
     */
    public function getItemLocation()
    {
        return $this->container['item_location'];
    }

    /**
     * Sets item_location
     *
     * @param \Swagger\Client\Model\Address $item_location item_location
     *
     * @return $this
     */
    public function setItemLocation($item_location)
    {
        $this->container['item_location'] = $item_location;

        return $this;
    }

    /**
     * Gets item_web_url
     *
     * @return string
     */
    public function getItemWebUrl()
    {
        return $this->container['item_web_url'];
    }

    /**
     * Sets item_web_url
     *
     * @param string $item_web_url The URL of the View Item page of the item.
     *
     * @return $this
     */
    public function setItemWebUrl($item_web_url)
    {
        $this->container['item_web_url'] = $item_web_url;

        return $this;
    }

    /**
     * Gets localized_aspects
     *
     * @return \Swagger\Client\Model\TypedNameValue[]
     */
    public function getLocalizedAspects()
    {
        return $this->container['localized_aspects'];
    }

    /**
     * Sets localized_aspects
     *
     * @param \Swagger\Client\Model\TypedNameValue[] $localized_aspects An array of containers for the complete list of the name/value pairs that describe the variation of the item.
     *
     * @return $this
     */
    public function setLocalizedAspects($localized_aspects)
    {
        $this->container['localized_aspects'] = $localized_aspects;

        return $this;
    }

    /**
     * Gets marketing_price
     *
     * @return \Swagger\Client\Model\MarketingPrice
     */
    public function getMarketingPrice()
    {
        return $this->container['marketing_price'];
    }

    /**
     * Sets marketing_price
     *
     * @param \Swagger\Client\Model\MarketingPrice $marketing_price marketing_price
     *
     * @return $this
     */
    public function setMarketingPrice($marketing_price)
    {
        $this->container['marketing_price'] = $marketing_price;

        return $this;
    }

    /**
     * Gets material
     *
     * @return string
     */
    public function getMaterial()
    {
        return $this->container['material'];
    }

    /**
     * Sets material
     *
     * @param string $material (Primary Item Aspect) Text describing what the item is made of. For example, silk. All the item aspects, including this aspect, are returned in the localizedAspects container.
     *
     * @return $this
     */
    public function setMaterial($material)
    {
        $this->container['material'] = $material;

        return $this;
    }

    /**
     * Gets mpn
     *
     * @return string
     */
    public function getMpn()
    {
        return $this->container['mpn'];
    }

    /**
     * Sets mpn
     *
     * @param string $mpn The manufacturer's part number, which is a unique number that identifies a specific product. To identify the product, this is always used along with brand.
     *
     * @return $this
     */
    public function setMpn($mpn)
    {
        $this->container['mpn'] = $mpn;

        return $this;
    }

    /**
     * Gets pattern
     *
     * @return string
     */
    public function getPattern()
    {
        return $this->container['pattern'];
    }

    /**
     * Sets pattern
     *
     * @param string $pattern (Primary Item Aspect) Text describing the pattern used on the item. For example, paisley. All the item aspects, including this aspect, are returned in the localizedAspects container.
     *
     * @return $this
     */
    public function setPattern($pattern)
    {
        $this->container['pattern'] = $pattern;

        return $this;
    }

    /**
     * Gets price
     *
     * @return \Swagger\Client\Model\ConvertedAmount
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param \Swagger\Client\Model\ConvertedAmount $price price
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets price_display_condition
     *
     * @return string
     */
    public function getPriceDisplayCondition()
    {
        return $this->container['price_display_condition'];
    }

    /**
     * Sets price_display_condition
     *
     * @param string $price_display_condition This enumeration value indicates how item price is displayed. For some items, the prices are so low that they can only be shown to the buyer after they add the item to the cart. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/browse/types/PriceDisplayConditionEnum.html'>eBay API documentation</a>
     *
     * @return $this
     */
    public function setPriceDisplayCondition($price_display_condition)
    {
        $this->container['price_display_condition'] = $price_display_condition;

        return $this;
    }

    /**
     * Gets primary_item_group
     *
     * @return \Swagger\Client\Model\ItemGroupSummary
     */
    public function getPrimaryItemGroup()
    {
        return $this->container['primary_item_group'];
    }

    /**
     * Sets primary_item_group
     *
     * @param \Swagger\Client\Model\ItemGroupSummary $primary_item_group primary_item_group
     *
     * @return $this
     */
    public function setPrimaryItemGroup($primary_item_group)
    {
        $this->container['primary_item_group'] = $primary_item_group;

        return $this;
    }

    /**
     * Gets primary_product_review_rating
     *
     * @return \Swagger\Client\Model\ReviewRating
     */
    public function getPrimaryProductReviewRating()
    {
        return $this->container['primary_product_review_rating'];
    }

    /**
     * Sets primary_product_review_rating
     *
     * @param \Swagger\Client\Model\ReviewRating $primary_product_review_rating primary_product_review_rating
     *
     * @return $this
     */
    public function setPrimaryProductReviewRating($primary_product_review_rating)
    {
        $this->container['primary_product_review_rating'] = $primary_product_review_rating;

        return $this;
    }

    /**
     * Gets product
     *
     * @return \Swagger\Client\Model\Product
     */
    public function getProduct()
    {
        return $this->container['product'];
    }

    /**
     * Sets product
     *
     * @param \Swagger\Client\Model\Product $product product
     *
     * @return $this
     */
    public function setProduct($product)
    {
        $this->container['product'] = $product;

        return $this;
    }

    /**
     * Gets product_fiche_web_url
     *
     * @return string
     */
    public function getProductFicheWebUrl()
    {
        return $this->container['product_fiche_web_url'];
    }

    /**
     * Sets product_fiche_web_url
     *
     * @param string $product_fiche_web_url The URL of a page containing the manufacture's specification of this item, which helps buyers make a purchasing decision. This information is available only for items that include the European energy efficiency rating (EEK) but is not available for all items with an EEK rating. This field is returned only if this information is available. The EEK rating of the item is returned in the energyEfficiencyClass field.
     *
     * @return $this
     */
    public function setProductFicheWebUrl($product_fiche_web_url)
    {
        $this->container['product_fiche_web_url'] = $product_fiche_web_url;

        return $this;
    }

    /**
     * Gets quantity_limit_per_buyer
     *
     * @return int
     */
    public function getQuantityLimitPerBuyer()
    {
        return $this->container['quantity_limit_per_buyer'];
    }

    /**
     * Sets quantity_limit_per_buyer
     *
     * @param int $quantity_limit_per_buyer The maximum number for a specific item that one buyer can purchase.
     *
     * @return $this
     */
    public function setQuantityLimitPerBuyer($quantity_limit_per_buyer)
    {
        $this->container['quantity_limit_per_buyer'] = $quantity_limit_per_buyer;

        return $this;
    }

    /**
     * Gets return_terms
     *
     * @return \Swagger\Client\Model\ItemReturnTerms
     */
    public function getReturnTerms()
    {
        return $this->container['return_terms'];
    }

    /**
     * Sets return_terms
     *
     * @param \Swagger\Client\Model\ItemReturnTerms $return_terms return_terms
     *
     * @return $this
     */
    public function setReturnTerms($return_terms)
    {
        $this->container['return_terms'] = $return_terms;

        return $this;
    }

    /**
     * Gets seller
     *
     * @return \Swagger\Client\Model\Seller
     */
    public function getSeller()
    {
        return $this->container['seller'];
    }

    /**
     * Sets seller
     *
     * @param \Swagger\Client\Model\Seller $seller seller
     *
     * @return $this
     */
    public function setSeller($seller)
    {
        $this->container['seller'] = $seller;

        return $this;
    }

    /**
     * Gets seller_item_revision
     *
     * @return string
     */
    public function getSellerItemRevision()
    {
        return $this->container['seller_item_revision'];
    }

    /**
     * Sets seller_item_revision
     *
     * @param string $seller_item_revision An identifier generated/incremented when a seller revises the item. There are two types of item revisions; seller changes, such as changing the title, and eBay system changes, such as changing the quantity when an item is purchased. This Id is changed only when the seller makes a change to the item. This means you cannot use this value to determine if the quantity has changed.
     *
     * @return $this
     */
    public function setSellerItemRevision($seller_item_revision)
    {
        $this->container['seller_item_revision'] = $seller_item_revision;

        return $this;
    }

    /**
     * Gets shipping_options
     *
     * @return \Swagger\Client\Model\ShippingOption[]
     */
    public function getShippingOptions()
    {
        return $this->container['shipping_options'];
    }

    /**
     * Sets shipping_options
     *
     * @param \Swagger\Client\Model\ShippingOption[] $shipping_options An array of shipping options containers that have the details about cost, carrier, etc. of one shipping option.
     *
     * @return $this
     */
    public function setShippingOptions($shipping_options)
    {
        $this->container['shipping_options'] = $shipping_options;

        return $this;
    }

    /**
     * Gets ship_to_locations
     *
     * @return \Swagger\Client\Model\ShipToLocations
     */
    public function getShipToLocations()
    {
        return $this->container['ship_to_locations'];
    }

    /**
     * Sets ship_to_locations
     *
     * @param \Swagger\Client\Model\ShipToLocations $ship_to_locations ship_to_locations
     *
     * @return $this
     */
    public function setShipToLocations($ship_to_locations)
    {
        $this->container['ship_to_locations'] = $ship_to_locations;

        return $this;
    }

    /**
     * Gets short_description
     *
     * @return string
     */
    public function getShortDescription()
    {
        return $this->container['short_description'];
    }

    /**
     * Sets short_description
     *
     * @param string $short_description A snippet of the full description of the item in plain text.
     *
     * @return $this
     */
    public function setShortDescription($short_description)
    {
        $this->container['short_description'] = $short_description;

        return $this;
    }

    /**
     * Gets size
     *
     * @return string
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param string $size (Primary Item Aspect) The size of the item. For example, '7' for a size 7 shoe. All the item aspects, including this aspect, are returned in the localizedAspects container.
     *
     * @return $this
     */
    public function setSize($size)
    {
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets size_system
     *
     * @return string
     */
    public function getSizeSystem()
    {
        return $this->container['size_system'];
    }

    /**
     * Sets size_system
     *
     * @param string $size_system (Primary Item Aspect) The sizing system of the country. All the item aspects, including this aspect, are returned in the localizedAspects container. Valid Values: &nbsp;&nbsp;US &nbsp;&nbsp;UK &nbsp;&nbsp;EU &nbsp;&nbsp;DE &nbsp;&nbsp;FR &nbsp;&nbsp;JP &nbsp;&nbsp;CN (China) &nbsp;&nbsp;IT &nbsp;&nbsp;BR &nbsp;&nbsp;MEX &nbsp;&nbsp;AU Code so that your app gracefully handles any future changes to this list.
     *
     * @return $this
     */
    public function setSizeSystem($size_system)
    {
        $this->container['size_system'] = $size_system;

        return $this;
    }

    /**
     * Gets size_type
     *
     * @return string
     */
    public function getSizeType()
    {
        return $this->container['size_type'];
    }

    /**
     * Sets size_type
     *
     * @param string $size_type (Primary Item Aspect) Text describing a size group in which the item would be included, such as regular, petite, plus, big-and-tall or maternity. All the item aspects, including this aspect, are returned in the localizedAspects container.
     *
     * @return $this
     */
    public function setSizeType($size_type)
    {
        $this->container['size_type'] = $size_type;

        return $this;
    }

    /**
     * Gets subtitle
     *
     * @return string
     */
    public function getSubtitle()
    {
        return $this->container['subtitle'];
    }

    /**
     * Sets subtitle
     *
     * @param string $subtitle An additional shorten title for the item that is created by the seller.
     *
     * @return $this
     */
    public function setSubtitle($subtitle)
    {
        $this->container['subtitle'] = $subtitle;

        return $this;
    }

    /**
     * Gets taxes
     *
     * @return \Swagger\Client\Model\Taxes[]
     */
    public function getTaxes()
    {
        return $this->container['taxes'];
    }

    /**
     * Sets taxes
     *
     * @param \Swagger\Client\Model\Taxes[] $taxes The container for the tax information for item.
     *
     * @return $this
     */
    public function setTaxes($taxes)
    {
        $this->container['taxes'] = $taxes;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title The seller-created title of the item.
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets top_rated_buying_experience
     *
     * @return bool
     */
    public function getTopRatedBuyingExperience()
    {
        return $this->container['top_rated_buying_experience'];
    }

    /**
     * Sets top_rated_buying_experience
     *
     * @param bool $top_rated_buying_experience Indicates if the item a top-rated plus item. There are three benefits of a top-rated plus item; a minimum 30-day money-back return policy, shipping the items in 1 business day with tracking provided, and the added comfort of knowing this item is from experienced sellers with the highest buyer ratings. See the Top Rated Plus Items and Becoming a Top Rated Seller and qualifying for Top Rated Plus help topics for more information.
     *
     * @return $this
     */
    public function setTopRatedBuyingExperience($top_rated_buying_experience)
    {
        $this->container['top_rated_buying_experience'] = $top_rated_buying_experience;

        return $this;
    }

    /**
     * Gets unique_bidder_count
     *
     * @return int
     */
    public function getUniqueBidderCount()
    {
        return $this->container['unique_bidder_count'];
    }

    /**
     * Sets unique_bidder_count
     *
     * @param int $unique_bidder_count This integer value indicates the number of different eBay users who have placed one or more bids on an auction item. This field is only applicable to auction listings.
     *
     * @return $this
     */
    public function setUniqueBidderCount($unique_bidder_count)
    {
        $this->container['unique_bidder_count'] = $unique_bidder_count;

        return $this;
    }

    /**
     * Gets unit_price
     *
     * @return \Swagger\Client\Model\ConvertedAmount
     */
    public function getUnitPrice()
    {
        return $this->container['unit_price'];
    }

    /**
     * Sets unit_price
     *
     * @param \Swagger\Client\Model\ConvertedAmount $unit_price unit_price
     *
     * @return $this
     */
    public function setUnitPrice($unit_price)
    {
        $this->container['unit_price'] = $unit_price;

        return $this;
    }

    /**
     * Gets unit_pricing_measure
     *
     * @return string
     */
    public function getUnitPricingMeasure()
    {
        return $this->container['unit_pricing_measure'];
    }

    /**
     * Sets unit_pricing_measure
     *
     * @param string $unit_pricing_measure The designation, such as size, weight, volume, count, etc., that was used to specify the quantity of the item. This helps buyers compare prices. For example, the following tells the buyer that the item is 7.99 per 100 grams. &quot;unitPricingMeasure&quot;: &quot;100g&quot;, &quot;unitPrice&quot;: { &nbsp;&nbsp;&quot;value&quot;: &quot;7.99&quot;, &nbsp;&nbsp;&quot;currency&quot;: &quot;GBP&quot;
     *
     * @return $this
     */
    public function setUnitPricingMeasure($unit_pricing_measure)
    {
        $this->container['unit_pricing_measure'] = $unit_pricing_measure;

        return $this;
    }

    /**
     * Gets warnings
     *
     * @return \Swagger\Client\Model\Error[]
     */
    public function getWarnings()
    {
        return $this->container['warnings'];
    }

    /**
     * Sets warnings
     *
     * @param \Swagger\Client\Model\Error[] $warnings An array of warning messages. These type of errors do not prevent the call from executing but should be checked.
     *
     * @return $this
     */
    public function setWarnings($warnings)
    {
        $this->container['warnings'] = $warnings;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


