<?php
/**
 * Refinement
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API to View & Search for Items
 *
 * The Browse API lets shoppers search for specific items by keyword, category, product, or item aspects and retrieve the details of an item.
 *
 * OpenAPI spec version: v1_beta.10.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Refinement Class Doc Comment
 *
 * @category Class
 * @description This type defines the fields for the various refinements of an item. You can use the information in this contain to create histograms, which help shopper choose exactly what they want.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Refinement implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Refinement';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'aspect_distributions' => '\Swagger\Client\Model\AspectDistribution[]',
        'buying_option_distributions' => '\Swagger\Client\Model\BuyingOptionDistribution[]',
        'category_distributions' => '\Swagger\Client\Model\CategoryDistribution[]',
        'condition_distributions' => '\Swagger\Client\Model\ConditionDistribution[]',
        'dominant_category_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'aspect_distributions' => null,
        'buying_option_distributions' => null,
        'category_distributions' => null,
        'condition_distributions' => null,
        'dominant_category_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'aspect_distributions' => 'aspectDistributions',
        'buying_option_distributions' => 'buyingOptionDistributions',
        'category_distributions' => 'categoryDistributions',
        'condition_distributions' => 'conditionDistributions',
        'dominant_category_id' => 'dominantCategoryId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'aspect_distributions' => 'setAspectDistributions',
        'buying_option_distributions' => 'setBuyingOptionDistributions',
        'category_distributions' => 'setCategoryDistributions',
        'condition_distributions' => 'setConditionDistributions',
        'dominant_category_id' => 'setDominantCategoryId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'aspect_distributions' => 'getAspectDistributions',
        'buying_option_distributions' => 'getBuyingOptionDistributions',
        'category_distributions' => 'getCategoryDistributions',
        'condition_distributions' => 'getConditionDistributions',
        'dominant_category_id' => 'getDominantCategoryId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['aspect_distributions'] = isset($data['aspect_distributions']) ? $data['aspect_distributions'] : null;
        $this->container['buying_option_distributions'] = isset($data['buying_option_distributions']) ? $data['buying_option_distributions'] : null;
        $this->container['category_distributions'] = isset($data['category_distributions']) ? $data['category_distributions'] : null;
        $this->container['condition_distributions'] = isset($data['condition_distributions']) ? $data['condition_distributions'] : null;
        $this->container['dominant_category_id'] = isset($data['dominant_category_id']) ? $data['dominant_category_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets aspect_distributions
     *
     * @return \Swagger\Client\Model\AspectDistribution[]
     */
    public function getAspectDistributions()
    {
        return $this->container['aspect_distributions'];
    }

    /**
     * Sets aspect_distributions
     *
     * @param \Swagger\Client\Model\AspectDistribution[] $aspect_distributions A array of containers for the all the aspect refinements.
     *
     * @return $this
     */
    public function setAspectDistributions($aspect_distributions)
    {
        $this->container['aspect_distributions'] = $aspect_distributions;

        return $this;
    }

    /**
     * Gets buying_option_distributions
     *
     * @return \Swagger\Client\Model\BuyingOptionDistribution[]
     */
    public function getBuyingOptionDistributions()
    {
        return $this->container['buying_option_distributions'];
    }

    /**
     * Sets buying_option_distributions
     *
     * @param \Swagger\Client\Model\BuyingOptionDistribution[] $buying_option_distributions A array of containers for the all the buying option refinements.
     *
     * @return $this
     */
    public function setBuyingOptionDistributions($buying_option_distributions)
    {
        $this->container['buying_option_distributions'] = $buying_option_distributions;

        return $this;
    }

    /**
     * Gets category_distributions
     *
     * @return \Swagger\Client\Model\CategoryDistribution[]
     */
    public function getCategoryDistributions()
    {
        return $this->container['category_distributions'];
    }

    /**
     * Sets category_distributions
     *
     * @param \Swagger\Client\Model\CategoryDistribution[] $category_distributions A array of containers for the all the category refinements.
     *
     * @return $this
     */
    public function setCategoryDistributions($category_distributions)
    {
        $this->container['category_distributions'] = $category_distributions;

        return $this;
    }

    /**
     * Gets condition_distributions
     *
     * @return \Swagger\Client\Model\ConditionDistribution[]
     */
    public function getConditionDistributions()
    {
        return $this->container['condition_distributions'];
    }

    /**
     * Sets condition_distributions
     *
     * @param \Swagger\Client\Model\ConditionDistribution[] $condition_distributions A array of containers for the all the condition refinements.
     *
     * @return $this
     */
    public function setConditionDistributions($condition_distributions)
    {
        $this->container['condition_distributions'] = $condition_distributions;

        return $this;
    }

    /**
     * Gets dominant_category_id
     *
     * @return string
     */
    public function getDominantCategoryId()
    {
        return $this->container['dominant_category_id'];
    }

    /**
     * Sets dominant_category_id
     *
     * @param string $dominant_category_id The identifier of the category that most of the items are part of.
     *
     * @return $this
     */
    public function setDominantCategoryId($dominant_category_id)
    {
        $this->container['dominant_category_id'] = $dominant_category_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


