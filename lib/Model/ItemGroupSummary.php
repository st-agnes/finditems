<?php
/**
 * ItemGroupSummary
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API to View & Search for Items
 *
 * The Browse API lets shoppers search for specific items by keyword, category, product, or item aspects and retrieve the details of an item.
 *
 * OpenAPI spec version: v1_beta.10.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ItemGroupSummary Class Doc Comment
 *
 * @category Class
 * @description The type that defines the fields for the details of each item in an item group. An item group is  an item that has various aspect differences, such as color, size, storage capacity, etc. When an item group is created, one of the item variations, such as the red shirt size L, is chosen as the \&quot;parent\&quot;. All the other items in the group are the children, such as the blue shirt size L, red shirt size M, etc. &lt;br /&gt;&lt;br /&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;b&gt; Note: &lt;/b&gt; This container is returned only if the &lt;b&gt; item_id&lt;/b&gt; in the request is an item group (parent Id of an item with variations).&lt;/span&gt;
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ItemGroupSummary implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ItemGroupSummary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'item_group_additional_images' => '\Swagger\Client\Model\Image[]',
        'item_group_href' => 'string',
        'item_group_id' => 'string',
        'item_group_image' => '\Swagger\Client\Model\Image',
        'item_group_title' => 'string',
        'item_group_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'item_group_additional_images' => null,
        'item_group_href' => null,
        'item_group_id' => null,
        'item_group_image' => null,
        'item_group_title' => null,
        'item_group_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'item_group_additional_images' => 'itemGroupAdditionalImages',
        'item_group_href' => 'itemGroupHref',
        'item_group_id' => 'itemGroupId',
        'item_group_image' => 'itemGroupImage',
        'item_group_title' => 'itemGroupTitle',
        'item_group_type' => 'itemGroupType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'item_group_additional_images' => 'setItemGroupAdditionalImages',
        'item_group_href' => 'setItemGroupHref',
        'item_group_id' => 'setItemGroupId',
        'item_group_image' => 'setItemGroupImage',
        'item_group_title' => 'setItemGroupTitle',
        'item_group_type' => 'setItemGroupType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'item_group_additional_images' => 'getItemGroupAdditionalImages',
        'item_group_href' => 'getItemGroupHref',
        'item_group_id' => 'getItemGroupId',
        'item_group_image' => 'getItemGroupImage',
        'item_group_title' => 'getItemGroupTitle',
        'item_group_type' => 'getItemGroupType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['item_group_additional_images'] = isset($data['item_group_additional_images']) ? $data['item_group_additional_images'] : null;
        $this->container['item_group_href'] = isset($data['item_group_href']) ? $data['item_group_href'] : null;
        $this->container['item_group_id'] = isset($data['item_group_id']) ? $data['item_group_id'] : null;
        $this->container['item_group_image'] = isset($data['item_group_image']) ? $data['item_group_image'] : null;
        $this->container['item_group_title'] = isset($data['item_group_title']) ? $data['item_group_title'] : null;
        $this->container['item_group_type'] = isset($data['item_group_type']) ? $data['item_group_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets item_group_additional_images
     *
     * @return \Swagger\Client\Model\Image[]
     */
    public function getItemGroupAdditionalImages()
    {
        return $this->container['item_group_additional_images'];
    }

    /**
     * Sets item_group_additional_images
     *
     * @param \Swagger\Client\Model\Image[] $item_group_additional_images An array of containers with the URLs for images that are in addition to the primary image of the item group. The primary image is returned in the itemGroupImage field.
     *
     * @return $this
     */
    public function setItemGroupAdditionalImages($item_group_additional_images)
    {
        $this->container['item_group_additional_images'] = $item_group_additional_images;

        return $this;
    }

    /**
     * Gets item_group_href
     *
     * @return string
     */
    public function getItemGroupHref()
    {
        return $this->container['item_group_href'];
    }

    /**
     * Sets item_group_href
     *
     * @param string $item_group_href The HATEOAS reference of the parent page of the item group. An item group is an item that has various aspect differences, such as color, size, storage capacity, etc.
     *
     * @return $this
     */
    public function setItemGroupHref($item_group_href)
    {
        $this->container['item_group_href'] = $item_group_href;

        return $this;
    }

    /**
     * Gets item_group_id
     *
     * @return string
     */
    public function getItemGroupId()
    {
        return $this->container['item_group_id'];
    }

    /**
     * Sets item_group_id
     *
     * @param string $item_group_id The unique identifier for the item group. An item group is an item that has various aspect differences, such as color, size, storage capacity, etc.
     *
     * @return $this
     */
    public function setItemGroupId($item_group_id)
    {
        $this->container['item_group_id'] = $item_group_id;

        return $this;
    }

    /**
     * Gets item_group_image
     *
     * @return \Swagger\Client\Model\Image
     */
    public function getItemGroupImage()
    {
        return $this->container['item_group_image'];
    }

    /**
     * Sets item_group_image
     *
     * @param \Swagger\Client\Model\Image $item_group_image item_group_image
     *
     * @return $this
     */
    public function setItemGroupImage($item_group_image)
    {
        $this->container['item_group_image'] = $item_group_image;

        return $this;
    }

    /**
     * Gets item_group_title
     *
     * @return string
     */
    public function getItemGroupTitle()
    {
        return $this->container['item_group_title'];
    }

    /**
     * Sets item_group_title
     *
     * @param string $item_group_title The title of the item that appears on the item group page. An item group is an item that has various aspect differences, such as color, size, storage capacity, etc.
     *
     * @return $this
     */
    public function setItemGroupTitle($item_group_title)
    {
        $this->container['item_group_title'] = $item_group_title;

        return $this;
    }

    /**
     * Gets item_group_type
     *
     * @return string
     */
    public function getItemGroupType()
    {
        return $this->container['item_group_type'];
    }

    /**
     * Sets item_group_type
     *
     * @param string $item_group_type Indicates the type of the item group. An item group is an item that has various aspect differences, such as color, size, storage capacity, etc. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/browse/types/ItemGroupTypeEnum.html'>eBay API documentation</a>
     *
     * @return $this
     */
    public function setItemGroupType($item_group_type)
    {
        $this->container['item_group_type'] = $item_group_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


